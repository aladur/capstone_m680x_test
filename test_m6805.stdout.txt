*********************
Platform: M680X_M6805
Code: 0x00 0x7f 0x00 0x01 0x7f 0x00 0x0e 0x7f 0x00 0x0f 0x7f 0x0d 0x10 0x7f 0x11 0x7f 0x1e 0x7f 0x1f 0x7f 0x20 0xfe 0x21 0x00 0x22 0x00 0x23 0x00 0x24 0x00 0x25 0x00 0x26 0x00 0x27 0x00 0x28 0x00 0x29 0x00 0x2a 0x00 0x2b 0x00 0x2c 0x00 0x2d 0x00 0x2e 0x00 0x2f 0x00 0x30 0x7f 0x33 0x7f 0x34 0x7f 0x36 0x7f 0x37 0x7f 0x38 0x7f 0x39 0x7f 0x3a 0x7f 0x3c 0x7f 0x3d 0x7f 0x3f 0x7f 0x40 0x42 0x43 0x44 0x46 0x47 0x48 0x49 0x4a 0x4c 0x4d 0x4f 0x50 0x53 0x54 0x56 0x57 0x58 0x59 0x5a 0x5c 0x5d 0x5f 0x60 0x80 0x63 0x7f 0x64 0x7f 0x66 0x7f 0x67 0x7f 0x68 0x7f 0x69 0x7f 0x6a 0x7f 0x6c 0x7f 0x6d 0x7f 0x6f 0x7f 0x70 0x73 0x74 0x76 0x77 0x78 0x79 0x7a 0x7c 0x7d 0x7f 0x80 0x81 0x83 0x8e 0x8f 0x97 0x98 0x99 0x9a 0x9b 0x9c 0x9d 0x9f 0xa0 0x10 0xa1 0x10 0xa2 0x10 0xa3 0x10 0xa4 0x10 0xa5 0x10 0xa6 0x10 0xa8 0x10 0xa9 0x10 0xaa 0x10 0xab 0x10 0xad 0x10 0xae 0x10 0xb0 0x10 0xb1 0x10 0xb2 0x10 0xb4 0x10 0xb5 0x10 0xb6 0x10 0xb7 0x10 0xb8 0x10 0xb9 0x10 0xba 0x10 0xbb 0x10 0xbc 0x10 0xc0 0x10 0x00 0xc1 0x10 0x00 0xc2 0x10 0x00 0xc3 0x10 0x00 0xc4 0x10 0x00 0xc5 0x10 0x00 0xc6 0x10 0x00 0xc7 0x10 0x00 0xc8 0x10 0x00 0xc9 0x10 0x00 0xca 0x10 0x00 0xcb 0x10 0x00 0xcc 0x10 0x00 0xcd 0x10 0x00 0xce 0x10 0x00 0xcf 0x10 0x00 0xd0 0x10 0x00 0xd1 0x10 0x00 0xd2 0x10 0x00 0xd3 0x10 0x00 0xd4 0x10 0x00 0xd5 0x10 0x00 0xd6 0x10 0x00 0xd7 0x10 0x00 0xd8 0x10 0x00 0xd9 0x10 0x00 0xda 0x10 0x00 0xdb 0x10 0x00 0xdc 0x10 0x00 0xdd 0x10 0x00 0xde 0x10 0x00 0xdf 0x10 0x00 0xe0 0x10 0xe1 0x10 0xe2 0x10 0xe3 0x10 0xe4 0x10 0xe5 0x10 0xe6 0x10 0xe7 0x10 0xe8 0x10 0xe9 0x10 0xea 0x10 0xeb 0x10 0xec 0x10 0xed 0x10 0xee 0x10 0xef 0x10 0xf0 0xf1 0xf2 0xf3 0xf4 0xf5 0xf6 0xf7 0xf8 0xf9 0xfa 0xfb 0xfc 0xfd 0xfe 0xff 
Disasm:
0x1000: 007f00     brset 0, $7f, $1003
	insn id: M680X_INS_BRSET
	operand_count: 3
		operands[0].type: INDEX = 0
			access: READ
		operands[1].type: DIRECT = 0x7f
			size: 1
			access: READ
		operands[2].type: RELATIVE = 0x1003
	reading from regs: cc
	writing to regs: cc
	groups: branch_relative, jump

0x1003: 017f00     brclr 0, $7f, $1006
	insn id: M680X_INS_BRCLR
	operand_count: 3
		operands[0].type: INDEX = 0
			access: READ
		operands[1].type: DIRECT = 0x7f
			size: 1
			access: READ
		operands[2].type: RELATIVE = 0x1006
	reading from regs: cc
	writing to regs: cc
	groups: branch_relative, jump

0x1006: 0e7f00     brset 7, $7f, $1009
	insn id: M680X_INS_BRSET
	operand_count: 3
		operands[0].type: INDEX = 7
			access: READ
		operands[1].type: DIRECT = 0x7f
			size: 1
			access: READ
		operands[2].type: RELATIVE = 0x1009
	reading from regs: cc
	writing to regs: cc
	groups: branch_relative, jump

0x1009: 0f7f0d     brclr 7, $7f, $1019
	insn id: M680X_INS_BRCLR
	operand_count: 3
		operands[0].type: INDEX = 7
			access: READ
		operands[1].type: DIRECT = 0x7f
			size: 1
			access: READ
		operands[2].type: RELATIVE = 0x1019
	reading from regs: cc
	writing to regs: cc
	groups: branch_relative, jump

        107f       bclr  0, $7f
	insn id: M680X_INS_BCLR
	operand_count: 2
		operands[0].type: INDEX = 0
			access: READ
		operands[1].type: DIRECT = 0x7f
			size: 1
			access: READ | WRITE

        117f       bset  0, $7f
	insn id: M680X_INS_BSET
	operand_count: 2
		operands[0].type: INDEX = 0
			access: READ
		operands[1].type: DIRECT = 0x7f
			size: 1
			access: READ | WRITE

        1e7f       bclr  7, $7f
	insn id: M680X_INS_BCLR
	operand_count: 2
		operands[0].type: INDEX = 7
			access: READ
		operands[1].type: DIRECT = 0x7f
			size: 1
			access: READ | WRITE

        1f7f       bset  7, $7f
	insn id: M680X_INS_BSET
	operand_count: 2
		operands[0].type: INDEX = 7
			access: READ
		operands[1].type: DIRECT = 0x7f
			size: 1
			access: READ | WRITE

0x1014: 20fe       bra   $1014
	insn id: M680X_INS_BRA
	operand_count: 1
		operands[0].type: RELATIVE = 0x1014
	groups: branch_relative, jump

0x1016: 2100       brn   $1018
	insn id: M680X_INS_BRN
	operand_count: 1
		operands[0].type: RELATIVE = 0x1018
	groups: branch_relative, jump

0x1018: 2200       bhi   $101a
	insn id: M680X_INS_BHI
	operand_count: 1
		operands[0].type: RELATIVE = 0x101a
	reading from regs: cc
	groups: branch_relative, jump

0x101a: 2300       bls   $101c
	insn id: M680X_INS_BLS
	operand_count: 1
		operands[0].type: RELATIVE = 0x101c
	reading from regs: cc
	groups: branch_relative, jump

0x101c: 2400       bcc   $101e
	insn id: M680X_INS_BCC
	operand_count: 1
		operands[0].type: RELATIVE = 0x101e
	reading from regs: cc
	groups: branch_relative, jump

0x101e: 2500       bcs   $1020
	insn id: M680X_INS_BCS
	operand_count: 1
		operands[0].type: RELATIVE = 0x1020
	reading from regs: cc
	groups: branch_relative, jump

0x1020: 2600       bne   $1022
	insn id: M680X_INS_BNE
	operand_count: 1
		operands[0].type: RELATIVE = 0x1022
	reading from regs: cc
	groups: branch_relative, jump

0x1022: 2700       beq   $1024
	insn id: M680X_INS_BEQ
	operand_count: 1
		operands[0].type: RELATIVE = 0x1024
	reading from regs: cc
	groups: branch_relative, jump

0x1024: 2800       bhcc  $1026
	insn id: M680X_INS_BHCC
	operand_count: 1
		operands[0].type: RELATIVE = 0x1026
	reading from regs: cc
	groups: branch_relative, jump

0x1026: 2900       bhcs  $1028
	insn id: M680X_INS_BHCS
	operand_count: 1
		operands[0].type: RELATIVE = 0x1028
	reading from regs: cc
	groups: branch_relative, jump

0x1028: 2a00       bpl   $102a
	insn id: M680X_INS_BPL
	operand_count: 1
		operands[0].type: RELATIVE = 0x102a
	reading from regs: cc
	groups: branch_relative, jump

0x102a: 2b00       bmi   $102c
	insn id: M680X_INS_BMI
	operand_count: 1
		operands[0].type: RELATIVE = 0x102c
	reading from regs: cc
	groups: branch_relative, jump

0x102c: 2c00       bmc   $102e
	insn id: M680X_INS_BMC
	operand_count: 1
		operands[0].type: RELATIVE = 0x102e
	reading from regs: cc
	groups: branch_relative, jump

0x102e: 2d00       bms   $1030
	insn id: M680X_INS_BMS
	operand_count: 1
		operands[0].type: RELATIVE = 0x1030
	reading from regs: cc
	groups: branch_relative, jump

0x1030: 2e00       bil   $1032
	insn id: M680X_INS_BIL
	operand_count: 1
		operands[0].type: RELATIVE = 0x1032
	reading from regs: cc
	groups: branch_relative, jump

0x1032: 2f00       bih   $1034
	insn id: M680X_INS_BIH
	operand_count: 1
		operands[0].type: RELATIVE = 0x1034
	reading from regs: cc
	groups: branch_relative, jump

        307f       neg   $7f
	insn id: M680X_INS_NEG
	operand_count: 1
		operands[0].type: DIRECT = 0x7f
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        337f       com   $7f
	insn id: M680X_INS_COM
	operand_count: 1
		operands[0].type: DIRECT = 0x7f
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        347f       lsr   $7f
	insn id: M680X_INS_LSR
	operand_count: 1
		operands[0].type: DIRECT = 0x7f
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        367f       ror   $7f
	insn id: M680X_INS_ROR
	operand_count: 1
		operands[0].type: DIRECT = 0x7f
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        377f       asr   $7f
	insn id: M680X_INS_ASR
	operand_count: 1
		operands[0].type: DIRECT = 0x7f
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        387f       lsl   $7f
	insn id: M680X_INS_LSL
	operand_count: 1
		operands[0].type: DIRECT = 0x7f
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        397f       rol   $7f
	insn id: M680X_INS_ROL
	operand_count: 1
		operands[0].type: DIRECT = 0x7f
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        3a7f       dec   $7f
	insn id: M680X_INS_DEC
	operand_count: 1
		operands[0].type: DIRECT = 0x7f
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        3c7f       inc   $7f
	insn id: M680X_INS_INC
	operand_count: 1
		operands[0].type: DIRECT = 0x7f
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        3d7f       tst   $7f
	insn id: M680X_INS_TST
	operand_count: 1
		operands[0].type: DIRECT = 0x7f
			size: 1
			access: READ
	reading from regs: cc
	writing to regs: cc

        3f7f       clr   $7f
	insn id: M680X_INS_CLR
	operand_count: 1
		operands[0].type: DIRECT = 0x7f
			size: 1
			access: WRITE
	reading from regs: cc
	writing to regs: cc

        40         nega
	insn id: M680X_INS_NEGA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, a
	writing to regs: cc, a

        42         mul
	insn id: M680X_INS_MUL
	reading from regs: cc, a, x
	writing to regs: cc, a, x

        43         coma
	insn id: M680X_INS_COMA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, a
	writing to regs: cc, a

        44         lsra
	insn id: M680X_INS_LSRA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, a
	writing to regs: cc, a

        46         rora
	insn id: M680X_INS_RORA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, a
	writing to regs: cc, a

        47         asra
	insn id: M680X_INS_ASRA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, a
	writing to regs: cc, a

        48         lsla
	insn id: M680X_INS_LSLA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, a
	writing to regs: cc, a

        49         rola
	insn id: M680X_INS_ROLA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, a
	writing to regs: cc, a

        4a         deca
	insn id: M680X_INS_DECA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, a
	writing to regs: cc, a

        4c         inca
	insn id: M680X_INS_INCA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, a
	writing to regs: cc, a

        4d         tsta
	insn id: M680X_INS_TSTA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc

        4f         clra
	insn id: M680X_INS_CLRA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
	reading from regs: cc
	writing to regs: cc, a

        50         negx
	insn id: M680X_INS_NEGX
	operand_count: 1
		operands[0].type: REGISTER = x (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc, x

        53         comx
	insn id: M680X_INS_COMX
	operand_count: 1
		operands[0].type: REGISTER = x (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc, x

        54         lsrx
	insn id: M680X_INS_LSRX
	operand_count: 1
		operands[0].type: REGISTER = x (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc, x

        56         rorx
	insn id: M680X_INS_RORX
	operand_count: 1
		operands[0].type: REGISTER = x (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc, x

        57         asrx
	insn id: M680X_INS_ASRX
	operand_count: 1
		operands[0].type: REGISTER = x (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc, x

        58         lslx
	insn id: M680X_INS_LSLX
	operand_count: 1
		operands[0].type: REGISTER = x (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc, x

        59         rolx
	insn id: M680X_INS_ROLX
	operand_count: 1
		operands[0].type: REGISTER = x (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc, x

        5a         decx
	insn id: M680X_INS_DECX
	operand_count: 1
		operands[0].type: REGISTER = x (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc, x

        5c         incx
	insn id: M680X_INS_INCX
	operand_count: 1
		operands[0].type: REGISTER = x (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc, x

        5d         tstx
	insn id: M680X_INS_TSTX
	operand_count: 1
		operands[0].type: REGISTER = x (in mnemonic)
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc

        5f         clrx
	insn id: M680X_INS_CLRX
	operand_count: 1
		operands[0].type: REGISTER = x (in mnemonic)
			size: 1
			access: WRITE
	reading from regs: cc
	writing to regs: cc, x

        6080       neg   128, x
	insn id: M680X_INS_NEG
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 128
			offset bits: 8
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        637f       com   127, x
	insn id: M680X_INS_COM
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 127
			offset bits: 8
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        647f       lsr   127, x
	insn id: M680X_INS_LSR
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 127
			offset bits: 8
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        667f       ror   127, x
	insn id: M680X_INS_ROR
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 127
			offset bits: 8
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        677f       asr   127, x
	insn id: M680X_INS_ASR
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 127
			offset bits: 8
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        687f       lsl   127, x
	insn id: M680X_INS_LSL
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 127
			offset bits: 8
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        697f       rol   127, x
	insn id: M680X_INS_ROL
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 127
			offset bits: 8
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        6a7f       dec   127, x
	insn id: M680X_INS_DEC
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 127
			offset bits: 8
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        6c7f       inc   127, x
	insn id: M680X_INS_INC
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 127
			offset bits: 8
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        6d7f       tst   127, x
	insn id: M680X_INS_TST
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 127
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc

        6f7f       clr   127, x
	insn id: M680X_INS_CLR
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 127
			offset bits: 8
			size: 1
			access: WRITE
	reading from regs: cc, x
	writing to regs: cc

        70         neg   , x
	insn id: M680X_INS_NEG
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        73         com   , x
	insn id: M680X_INS_COM
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        74         lsr   , x
	insn id: M680X_INS_LSR
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        76         ror   , x
	insn id: M680X_INS_ROR
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        77         asr   , x
	insn id: M680X_INS_ASR
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        78         lsl   , x
	insn id: M680X_INS_LSL
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        79         rol   , x
	insn id: M680X_INS_ROL
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        7a         dec   , x
	insn id: M680X_INS_DEC
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        7c         inc   , x
	insn id: M680X_INS_INC
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        7d         tst   , x
	insn id: M680X_INS_TST
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc

        7f         clr   , x
	insn id: M680X_INS_CLR
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			size: 1
			access: WRITE
	reading from regs: cc, x
	writing to regs: cc

        80         rti
	insn id: M680X_INS_RTI
	reading from regs: s
	writing to regs: s, cc, a, x, pc
	groups: interrupt_return

        81         rts
	insn id: M680X_INS_RTS
	reading from regs: s
	writing to regs: s, pc
	groups: return

        83         swi
	insn id: M680X_INS_SWI
	reading from regs: cc, s, pc, x, a
	writing to regs: cc, s, pc
	groups: interrupt

        8e         stop
	insn id: M680X_INS_STOP

        8f         wait
	insn id: M680X_INS_WAIT
	reading from regs: cc
	writing to regs: cc

        97         tax
	insn id: M680X_INS_TAX
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: REGISTER = x (in mnemonic)
			size: 1
			access: WRITE
	reading from regs: a
	writing to regs: x

        98         clc
	insn id: M680X_INS_CLC
	reading from regs: cc
	writing to regs: cc

        99         sec
	insn id: M680X_INS_SEC
	reading from regs: cc
	writing to regs: cc

        9a         cli
	insn id: M680X_INS_CLI
	reading from regs: cc
	writing to regs: cc

        9b         sei
	insn id: M680X_INS_SEI
	reading from regs: cc
	writing to regs: cc

        9c         rsp
	insn id: M680X_INS_RSP
	operand_count: 1
		operands[0].type: REGISTER = s (in mnemonic)
			size: 2
			access: WRITE
	writing to regs: s

        9d         nop
	insn id: M680X_INS_NOP

        9f         txa
	insn id: M680X_INS_TXA
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 1
			access: READ
		operands[1].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
	reading from regs: x
	writing to regs: a

        a010       sub   #16
	insn id: M680X_INS_SUB
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        a110       cmp   #16
	insn id: M680X_INS_CMP
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc

        a210       sbc   #16
	insn id: M680X_INS_SBC
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        a310       cpx   #16
	insn id: M680X_INS_CPX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 1
			access: READ
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc

        a410       and   #16
	insn id: M680X_INS_AND
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        a510       bit   #16
	insn id: M680X_INS_BIT
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc

        a610       lda   #16
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc
	writing to regs: cc, a

        a810       eor   #16
	insn id: M680X_INS_EOR
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        a910       adc   #16
	insn id: M680X_INS_ADC
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        aa10       ora   #16
	insn id: M680X_INS_ORA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        ab10       add   #16
	insn id: M680X_INS_ADD
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

0x10a5: ad10       bsr   $10b7
	insn id: M680X_INS_BSR
	operand_count: 1
		operands[0].type: RELATIVE = 0x10b7
	reading from regs: s
	writing to regs: s
	groups: branch_relative, call

        ae10       ldx   #16
	insn id: M680X_INS_LDX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc
	writing to regs: cc, x

        b010       sub   $10
	insn id: M680X_INS_SUB
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        b110       cmp   $10
	insn id: M680X_INS_CMP
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc

        b210       sbc   $10
	insn id: M680X_INS_SBC
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        b410       and   $10
	insn id: M680X_INS_AND
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        b510       bit   $10
	insn id: M680X_INS_BIT
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc

        b610       lda   $10
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc
	writing to regs: cc, a

        b710       sta   $10
	insn id: M680X_INS_STA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: DIRECT = 0x10
			size: 1
			access: WRITE
	reading from regs: cc, a
	writing to regs: cc

        b810       eor   $10
	insn id: M680X_INS_EOR
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        b910       adc   $10
	insn id: M680X_INS_ADC
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        ba10       ora   $10
	insn id: M680X_INS_ORA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        bb10       add   $10
	insn id: M680X_INS_ADD
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        bc10       jmp   $10
	insn id: M680X_INS_JMP
	operand_count: 1
		operands[0].type: DIRECT = 0x10
	groups: jump

        c01000     sub   $1000
	insn id: M680X_INS_SUB
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        c11000     cmp   $1000
	insn id: M680X_INS_CMP
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc

        c21000     sbc   $1000
	insn id: M680X_INS_SBC
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        c31000     cpx   $1000
	insn id: M680X_INS_CPX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 1
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc

        c41000     and   $1000
	insn id: M680X_INS_AND
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        c51000     bit   $1000
	insn id: M680X_INS_BIT
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc

        c61000     lda   $1000
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc
	writing to regs: cc, a

        c71000     sta   $1000
	insn id: M680X_INS_STA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: WRITE
	reading from regs: cc, a
	writing to regs: cc

        c81000     eor   $1000
	insn id: M680X_INS_EOR
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        c91000     adc   $1000
	insn id: M680X_INS_ADC
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        ca1000     ora   $1000
	insn id: M680X_INS_ORA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        cb1000     add   $1000
	insn id: M680X_INS_ADD
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        cc1000     jmp   $1000
	insn id: M680X_INS_JMP
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
	groups: jump

        cd1000     jsr   $1000
	insn id: M680X_INS_JSR
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
	reading from regs: s
	writing to regs: s
	groups: call

        ce1000     ldx   $1000
	insn id: M680X_INS_LDX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc
	writing to regs: cc, x

        cf1000     stx   $1000
	insn id: M680X_INS_STX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 1
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: WRITE
	reading from regs: cc, x
	writing to regs: cc

        d01000     sub   4096, x
	insn id: M680X_INS_SUB
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 4096
			offset bits: 16
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        d11000     cmp   4096, x
	insn id: M680X_INS_CMP
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 4096
			offset bits: 16
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc

        d21000     sbc   4096, x
	insn id: M680X_INS_SBC
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 4096
			offset bits: 16
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        d31000     cpx   4096, x
	insn id: M680X_INS_CPX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 4096
			offset bits: 16
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc

        d41000     and   4096, x
	insn id: M680X_INS_AND
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 4096
			offset bits: 16
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        d51000     bit   4096, x
	insn id: M680X_INS_BIT
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 4096
			offset bits: 16
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc

        d61000     lda   4096, x
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 4096
			offset bits: 16
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc, a

        d71000     sta   4096, x
	insn id: M680X_INS_STA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 4096
			offset bits: 16
			size: 1
			access: WRITE
	reading from regs: cc, a, x
	writing to regs: cc

        d81000     eor   4096, x
	insn id: M680X_INS_EOR
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 4096
			offset bits: 16
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        d91000     adc   4096, x
	insn id: M680X_INS_ADC
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 4096
			offset bits: 16
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        da1000     ora   4096, x
	insn id: M680X_INS_ORA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 4096
			offset bits: 16
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        db1000     add   4096, x
	insn id: M680X_INS_ADD
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 4096
			offset bits: 16
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        dc1000     jmp   4096, x
	insn id: M680X_INS_JMP
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 4096
			offset bits: 16
	reading from regs: x
	groups: jump

        dd1000     jsr   4096, x
	insn id: M680X_INS_JSR
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 4096
			offset bits: 16
	reading from regs: x, s
	writing to regs: s
	groups: call

        de1000     ldx   4096, x
	insn id: M680X_INS_LDX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 4096
			offset bits: 16
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc, x

        df1000     stx   4096, x
	insn id: M680X_INS_STX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 4096
			offset bits: 16
			size: 1
			access: WRITE
	reading from regs: cc, x
	writing to regs: cc

        e010       sub   16, x
	insn id: M680X_INS_SUB
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        e110       cmp   16, x
	insn id: M680X_INS_CMP
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc

        e210       sbc   16, x
	insn id: M680X_INS_SBC
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        e310       cpx   16, x
	insn id: M680X_INS_CPX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc

        e410       and   16, x
	insn id: M680X_INS_AND
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        e510       bit   16, x
	insn id: M680X_INS_BIT
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc

        e610       lda   16, x
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc, a

        e710       sta   16, x
	insn id: M680X_INS_STA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 1
			access: WRITE
	reading from regs: cc, a, x
	writing to regs: cc

        e810       eor   16, x
	insn id: M680X_INS_EOR
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        e910       adc   16, x
	insn id: M680X_INS_ADC
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        ea10       ora   16, x
	insn id: M680X_INS_ORA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        eb10       add   16, x
	insn id: M680X_INS_ADD
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        ec10       jmp   16, x
	insn id: M680X_INS_JMP
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
	reading from regs: x
	groups: jump

        ed10       jsr   16, x
	insn id: M680X_INS_JSR
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
	reading from regs: x, s
	writing to regs: s
	groups: call

        ee10       ldx   16, x
	insn id: M680X_INS_LDX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc, x

        ef10       stx   16, x
	insn id: M680X_INS_STX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 1
			access: WRITE
	reading from regs: cc, x
	writing to regs: cc

        f0         sub   , x
	insn id: M680X_INS_SUB
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        f1         cmp   , x
	insn id: M680X_INS_CMP
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc

        f2         sbc   , x
	insn id: M680X_INS_SBC
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        f3         cpx   , x
	insn id: M680X_INS_CPX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc

        f4         and   , x
	insn id: M680X_INS_AND
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        f5         bit   , x
	insn id: M680X_INS_BIT
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc

        f6         lda   , x
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc, a

        f7         sta   , x
	insn id: M680X_INS_STA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			size: 1
			access: WRITE
	reading from regs: cc, a, x
	writing to regs: cc

        f8         eor   , x
	insn id: M680X_INS_EOR
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        f9         adc   , x
	insn id: M680X_INS_ADC
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        fa         ora   , x
	insn id: M680X_INS_ORA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        fb         add   , x
	insn id: M680X_INS_ADD
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        fc         jmp   , x
	insn id: M680X_INS_JMP
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
	reading from regs: x
	groups: jump

        fd         jsr   , x
	insn id: M680X_INS_JSR
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
	reading from regs: x, s
	writing to regs: s
	groups: call

        fe         ldx   , x
	insn id: M680X_INS_LDX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc, x

        ff         stx   , x
	insn id: M680X_INS_STX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			size: 1
			access: WRITE
	reading from regs: cc, x
	writing to regs: cc

0x1151

*********************
Platform: M680X_M6805_ILLEGAL
Code: 0x31 0x32 0x35 0x3e 0x41 0x45 0x4e 0x51 0x52 0x55 0x5e 0x61 0x62 0x65 0x6e 0x71 0x72 0x75 0x7e 0x82 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x90 0x91 0x92 0x93 0x94 0x95 0x96 0x9e 0xa7 0xac 0xaf 
Disasm:
        31         fcb   $31
        32         fcb   $32
        35         fcb   $35
        3e         fcb   $3e
        41         fcb   $41
        45         fcb   $45
        4e         fcb   $4e
        51         fcb   $51
        52         fcb   $52
        55         fcb   $55
        5e         fcb   $5e
        61         fcb   $61
        62         fcb   $62
        65         fcb   $65
        6e         fcb   $6e
        71         fcb   $71
        72         fcb   $72
        75         fcb   $75
        7e         fcb   $7e
        82         fcb   $82
        84         fcb   $84
        85         fcb   $85
        86         fcb   $86
        87         fcb   $87
        88         fcb   $88
        89         fcb   $89
        8a         fcb   $8a
        8b         fcb   $8b
        8c         fcb   $8c
        8d         fcb   $8d
        90         fcb   $90
        91         fcb   $91
        92         fcb   $92
        93         fcb   $93
        94         fcb   $94
        95         fcb   $95
        96         fcb   $96
        9e         fcb   $9e
        a7         fcb   $a7
        ac         fcb   $ac
        af         fcb   $af
0x1029

