*********************
Platform: M680X_M6809
Code: 0x00 0x10 0x03 0x10 0x04 0x10 0x06 0x10 0x07 0x10 0x08 0x10 0x09 0x10 0x0a 0x10 0x0c 0x10 0x0d 0x10 0x0e 0x10 0x0f 0x10 0x12 0x13 0x16 0xff 0xfd 0x17 0x00 0x00 0x19 0x1a 0x10 0x1c 0x10 0x1d 0x1e 0x01 0x1f 0x89 0x20 0xfe 0x21 0x00 0x22 0x00 0x23 0x00 0x24 0x00 0x25 0x00 0x26 0x00 0x27 0x00 0x28 0x00 0x29 0x00 0x2a 0x00 0x2b 0x00 0x2c 0x00 0x2d 0x00 0x2e 0x00 0x2f 0x00 0x30 0x00 0x31 0x00 0x32 0x00 0x33 0x00 0x34 0x55 0x35 0xff 0x36 0x01 0x37 0xf0 0x39 0x3a 0x3b 0x3c 0x10 0x3d 0x3f 0x40 0x43 0x44 0x46 0x47 0x48 0x49 0x4a 0x4c 0x4d 0x4f 0x50 0x53 0x54 0x56 0x57 0x58 0x59 0x5a 0x5c 0x5d 0x5f 0x60 0x00 0x63 0x00 0x64 0x00 0x66 0x00 0x67 0x00 0x68 0x00 0x69 0x00 0x6a 0x00 0x6c 0x00 0x6d 0x00 0x6e 0x00 0x6f 0x00 0x70 0x10 0x00 0x73 0x10 0x00 0x74 0x10 0x00 0x76 0x10 0x00 0x77 0x10 0x00 0x78 0x10 0x00 0x79 0x10 0x00 0x7a 0x10 0x00 0x7c 0x10 0x00 0x7d 0x10 0x00 0x7e 0x10 0x00 0x7f 0x10 0x00 0x80 0x10 0x81 0x10 0x82 0x10 0x83 0x10 0x00 0x84 0x10 0x85 0x10 0x86 0x10 0x88 0x10 0x89 0x10 0x8a 0x10 0x8b 0x10 0x8c 0x10 0x00 0x8d 0x00 0x8e 0x10 0x00 0x90 0x10 0x91 0x10 0x92 0x10 0x93 0x10 0x94 0x10 0x95 0x10 0x96 0x10 0x97 0x10 0x98 0x10 0x99 0x10 0x9a 0x10 0x9b 0x10 0x9c 0x10 0x9d 0x10 0x9e 0x10 0x9f 0x10 0xa0 0x00 0xa1 0x00 0xa2 0x00 0xa3 0x00 0xa4 0x00 0xa5 0x00 0xa6 0x00 0xa7 0x00 0xa8 0x00 0xa9 0x00 0xaa 0x00 0xab 0x00 0xac 0x00 0xad 0x00 0xae 0x00 0xaf 0x00 0xb0 0x10 0x00 0xb1 0x10 0x00 0xb2 0x10 0x00 0xb3 0x10 0x00 0xb4 0x10 0x00 0xb5 0x10 0x00 0xb6 0x10 0x00 0xb7 0x10 0x00 0xb8 0x10 0x00 0xb9 0x10 0x00 0xba 0x10 0x00 0xbb 0x10 0x00 0xbc 0x10 0x00 0xbd 0x10 0x00 0xbe 0x10 0x00 0xbf 0x10 0x00 0xc0 0x10 0xc1 0x10 0xc2 0x10 0xc3 0x10 0x00 0xc4 0x10 0xc5 0x10 0xc6 0x10 0xc8 0x10 0xc9 0x10 0xca 0x10 0xcb 0x10 0xcc 0x10 0x00 0xce 0x10 0x00 0xd0 0x10 0xd1 0x10 0xd2 0x10 0xd3 0x10 0xd4 0x10 0xd5 0x10 0xd6 0x10 0xd7 0x10 0xd8 0x10 0xd9 0x10 0xda 0x10 0xdb 0x10 0xdc 0x10 0xdd 0x10 0xde 0x10 0xdf 0x10 0xe0 0x00 0xe1 0x00 0xe2 0x00 0xe3 0x00 0xe4 0x00 0xe5 0x00 0xe6 0x00 0xe7 0x00 0xe8 0x00 0xe9 0x00 0xea 0x00 0xeb 0x00 0xec 0x00 0xed 0x00 0xee 0x00 0xef 0x00 0xf0 0x10 0x00 0xf1 0x10 0x00 0xf2 0x10 0x00 0xf3 0x10 0x00 0xf4 0x10 0x00 0xf5 0x10 0x00 0xf6 0x10 0x00 0xf7 0x10 0x00 0xf8 0x10 0x00 0xf9 0x10 0x00 0xfa 0x10 0x00 0xfb 0x10 0x00 0xfc 0x10 0x00 0xfd 0x10 0x00 0xfe 0x10 0x00 0xff 0x10 0x00 0x10 0x21 0x00 0x00 0x10 0x22 0x00 0x00 0x10 0x23 0x00 0x00 0x10 0x24 0x00 0x00 0x10 0x25 0x00 0x00 0x10 0x26 0x00 0x00 0x10 0x27 0x00 0x00 0x10 0x28 0x00 0x00 0x10 0x29 0x00 0x00 0x10 0x2a 0x00 0x00 0x10 0x2b 0x00 0x00 0x10 0x2c 0x00 0x00 0x10 0x2d 0x00 0x00 0x10 0x2e 0x00 0x00 0x10 0x2f 0x00 0x00 0x10 0x3f 0x10 0x83 0x10 0x00 0x10 0x93 0x10 0x10 0xa3 0x99 0x10 0x00 0x10 0xb3 0x10 0x00 0x10 0x8c 0x10 0x00 0x10 0x9c 0x10 0x10 0xac 0x99 0x10 0x00 0x10 0xbc 0x10 0x00 0x10 0xce 0x10 0x00 0x10 0xde 0x10 0x10 0xee 0x99 0x10 0x00 0x10 0xfe 0x10 0x00 0x10 0xdf 0x10 0x10 0xef 0x99 0x10 0x00 0x10 0xff 0x10 0x00 0x11 0x3f 0x11 0x83 0x10 0x00 0x11 0x93 0x10 0x11 0xa3 0x99 0x10 0x00 0x11 0xb3 0x10 0x00 0x11 0x8c 0x10 0x00 0x11 0x9c 0x10 0x11 0xac 0x99 0x10 0x00 0x11 0xbc 0x10 0x00 0xa6 0x07 0xa6 0x27 0xa6 0x47 0xa6 0x67 0xa6 0x0f 0xa6 0x10 0xa6 0x80 0xa6 0x81 0xa6 0x82 0xa6 0x83 0xa6 0x84 0xa6 0x85 0xa6 0x86 0xa6 0x88 0x7f 0xa6 0x88 0x80 0xa6 0x89 0x7f 0xff 0xa6 0x89 0x80 0x00 0xa6 0x8b 0xa6 0x8c 0x10 0xa6 0x8d 0x10 0x00 0xa6 0x91 0xa6 0x93 0xa6 0x94 0xa6 0x95 0xa6 0x96 0xa6 0x98 0x7f 0xa6 0x98 0x80 0xa6 0x99 0x7f 0xff 0xa6 0x99 0x80 0x00 0xa6 0x9b 0xa6 0x9c 0x10 0xa6 0x9d 0x10 0x00 0xa6 0x9f 0x10 0x00 
Disasm:
        0010       neg   $10
	insn id: M680X_INS_NEG
	operand_count: 1
		operands[0].type: DIRECT = 0x10
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        0310       com   $10
	insn id: M680X_INS_COM
	operand_count: 1
		operands[0].type: DIRECT = 0x10
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        0410       lsr   $10
	insn id: M680X_INS_LSR
	operand_count: 1
		operands[0].type: DIRECT = 0x10
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        0610       ror   $10
	insn id: M680X_INS_ROR
	operand_count: 1
		operands[0].type: DIRECT = 0x10
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        0710       asr   $10
	insn id: M680X_INS_ASR
	operand_count: 1
		operands[0].type: DIRECT = 0x10
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        0810       lsl   $10
	insn id: M680X_INS_LSL
	operand_count: 1
		operands[0].type: DIRECT = 0x10
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        0910       rol   $10
	insn id: M680X_INS_ROL
	operand_count: 1
		operands[0].type: DIRECT = 0x10
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        0a10       dec   $10
	insn id: M680X_INS_DEC
	operand_count: 1
		operands[0].type: DIRECT = 0x10
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        0c10       inc   $10
	insn id: M680X_INS_INC
	operand_count: 1
		operands[0].type: DIRECT = 0x10
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        0d10       tst   $10
	insn id: M680X_INS_TST
	operand_count: 1
		operands[0].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc
	writing to regs: cc

        0e10       jmp   $10
	insn id: M680X_INS_JMP
	operand_count: 1
		operands[0].type: DIRECT = 0x10
	groups: jump

        0f10       clr   $10
	insn id: M680X_INS_CLR
	operand_count: 1
		operands[0].type: DIRECT = 0x10
			size: 1
			access: WRITE
	reading from regs: cc
	writing to regs: cc

        12         nop
	insn id: M680X_INS_NOP

        13         sync
	insn id: M680X_INS_SYNC

0x101a: 16fffd     lbra  $101a
	insn id: M680X_INS_LBRA
	operand_count: 1
		operands[0].type: RELATIVE = 0x101a
	groups: branch_relative, jump

0x101d: 170000     lbsr  $1020
	insn id: M680X_INS_LBSR
	operand_count: 1
		operands[0].type: RELATIVE = 0x1020
	reading from regs: s
	writing to regs: s
	groups: branch_relative, call

        19         daa
	insn id: M680X_INS_DAA
	reading from regs: cc, a
	writing to regs: cc, a

        1a10       orcc  #16
	insn id: M680X_INS_ORCC
	operand_count: 2
		operands[0].type: REGISTER = cc (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc
	writing to regs: cc

        1c10       andcc #16
	insn id: M680X_INS_ANDCC
	operand_count: 2
		operands[0].type: REGISTER = cc (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc
	writing to regs: cc

        1d         sex
	insn id: M680X_INS_SEX
	reading from regs: cc, b
	writing to regs: cc, a

        1e01       exg   d, x
	insn id: M680X_INS_EXG
	operand_count: 2
		operands[0].type: REGISTER = d
			size: 2
			access: READ | WRITE
		operands[1].type: REGISTER = x
			size: 2
			access: READ | WRITE
	reading from regs: d, x
	writing to regs: d, x

        1f89       tfr   a, b
	insn id: M680X_INS_TFR
	operand_count: 2
		operands[0].type: REGISTER = a
			size: 1
			access: READ
		operands[1].type: REGISTER = b
			size: 1
			access: WRITE
	reading from regs: a
	writing to regs: b

0x102a: 20fe       bra   $102a
	insn id: M680X_INS_BRA
	operand_count: 1
		operands[0].type: RELATIVE = 0x102a
	groups: branch_relative, jump

0x102c: 2100       brn   $102e
	insn id: M680X_INS_BRN
	operand_count: 1
		operands[0].type: RELATIVE = 0x102e
	groups: branch_relative, jump

0x102e: 2200       bhi   $1030
	insn id: M680X_INS_BHI
	operand_count: 1
		operands[0].type: RELATIVE = 0x1030
	reading from regs: cc
	groups: branch_relative, jump

0x1030: 2300       bls   $1032
	insn id: M680X_INS_BLS
	operand_count: 1
		operands[0].type: RELATIVE = 0x1032
	reading from regs: cc
	groups: branch_relative, jump

0x1032: 2400       bcc   $1034
	insn id: M680X_INS_BCC
	operand_count: 1
		operands[0].type: RELATIVE = 0x1034
	reading from regs: cc
	groups: branch_relative, jump

0x1034: 2500       bcs   $1036
	insn id: M680X_INS_BCS
	operand_count: 1
		operands[0].type: RELATIVE = 0x1036
	reading from regs: cc
	groups: branch_relative, jump

0x1036: 2600       bne   $1038
	insn id: M680X_INS_BNE
	operand_count: 1
		operands[0].type: RELATIVE = 0x1038
	reading from regs: cc
	groups: branch_relative, jump

0x1038: 2700       beq   $103a
	insn id: M680X_INS_BEQ
	operand_count: 1
		operands[0].type: RELATIVE = 0x103a
	reading from regs: cc
	groups: branch_relative, jump

0x103a: 2800       bvc   $103c
	insn id: M680X_INS_BVC
	operand_count: 1
		operands[0].type: RELATIVE = 0x103c
	reading from regs: cc
	groups: branch_relative, jump

0x103c: 2900       bvs   $103e
	insn id: M680X_INS_BVS
	operand_count: 1
		operands[0].type: RELATIVE = 0x103e
	reading from regs: cc
	groups: branch_relative, jump

0x103e: 2a00       bpl   $1040
	insn id: M680X_INS_BPL
	operand_count: 1
		operands[0].type: RELATIVE = 0x1040
	reading from regs: cc
	groups: branch_relative, jump

0x1040: 2b00       bmi   $1042
	insn id: M680X_INS_BMI
	operand_count: 1
		operands[0].type: RELATIVE = 0x1042
	reading from regs: cc
	groups: branch_relative, jump

0x1042: 2c00       bge   $1044
	insn id: M680X_INS_BGE
	operand_count: 1
		operands[0].type: RELATIVE = 0x1044
	reading from regs: cc
	groups: branch_relative, jump

0x1044: 2d00       blt   $1046
	insn id: M680X_INS_BLT
	operand_count: 1
		operands[0].type: RELATIVE = 0x1046
	reading from regs: cc
	groups: branch_relative, jump

0x1046: 2e00       bgt   $1048
	insn id: M680X_INS_BGT
	operand_count: 1
		operands[0].type: RELATIVE = 0x1048
	reading from regs: cc
	groups: branch_relative, jump

0x1048: 2f00       ble   $104a
	insn id: M680X_INS_BLE
	operand_count: 1
		operands[0].type: RELATIVE = 0x104a
	reading from regs: cc
	groups: branch_relative, jump

        3000       leax  0, x
	insn id: M680X_INS_LEAX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: READ
	reading from regs: cc, x
	writing to regs: cc, x

        3100       leay  0, x
	insn id: M680X_INS_LEAY
	operand_count: 2
		operands[0].type: REGISTER = y (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: READ
	reading from regs: cc, x
	writing to regs: cc, y

        3200       leas  0, x
	insn id: M680X_INS_LEAS
	operand_count: 2
		operands[0].type: REGISTER = s (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: READ
	reading from regs: x
	writing to regs: s

        3300       leau  0, x
	insn id: M680X_INS_LEAU
	operand_count: 2
		operands[0].type: REGISTER = u (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: READ
	reading from regs: x
	writing to regs: u

        3455       pshs  cc, b, x, u
	insn id: M680X_INS_PSHS
	operand_count: 5
		operands[0].type: REGISTER = s (in mnemonic)
			size: 2
			access: READ | WRITE
		operands[1].type: REGISTER = cc
			size: 1
			access: READ
		operands[2].type: REGISTER = b
			size: 1
			access: READ
		operands[3].type: REGISTER = x
			size: 2
			access: READ
		operands[4].type: REGISTER = u
			size: 2
			access: READ
	reading from regs: s, cc, b, x, u
	writing to regs: s

        35ff       puls  cc, a, b, dp, x, y, u, pc
	insn id: M680X_INS_PULS
	operand_count: 9
		operands[0].type: REGISTER = s (in mnemonic)
			size: 2
			access: READ | WRITE
		operands[1].type: REGISTER = cc
			size: 1
			access: WRITE
		operands[2].type: REGISTER = a
			size: 1
			access: WRITE
		operands[3].type: REGISTER = b
			size: 1
			access: WRITE
		operands[4].type: REGISTER = dp
			size: 1
			access: WRITE
		operands[5].type: REGISTER = x
			size: 2
			access: WRITE
		operands[6].type: REGISTER = y
			size: 2
			access: WRITE
		operands[7].type: REGISTER = u
			size: 2
			access: WRITE
		operands[8].type: REGISTER = pc
			size: 2
			access: WRITE
	reading from regs: s
	writing to regs: s, cc, a, b, dp, x, y, u, pc
	groups: return

        3601       pshu  cc
	insn id: M680X_INS_PSHU
	operand_count: 2
		operands[0].type: REGISTER = u (in mnemonic)
			size: 2
			access: READ | WRITE
		operands[1].type: REGISTER = cc
			size: 1
			access: READ
	reading from regs: u, cc
	writing to regs: u

        37f0       pulu  x, y, s, pc
	insn id: M680X_INS_PULU
	operand_count: 5
		operands[0].type: REGISTER = u (in mnemonic)
			size: 2
			access: READ | WRITE
		operands[1].type: REGISTER = x
			size: 2
			access: WRITE
		operands[2].type: REGISTER = y
			size: 2
			access: WRITE
		operands[3].type: REGISTER = s
			size: 2
			access: WRITE
		operands[4].type: REGISTER = pc
			size: 2
			access: WRITE
	reading from regs: u
	writing to regs: u, x, y, s, pc
	groups: return

        39         rts
	insn id: M680X_INS_RTS
	reading from regs: s
	writing to regs: s, pc
	groups: return

        3a         abx
	insn id: M680X_INS_ABX
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: REGISTER = x (in mnemonic)
			size: 2
			access: READ | WRITE
	reading from regs: b, x
	writing to regs: x

        3b         rti
	insn id: M680X_INS_RTI
	reading from regs: s
	writing to regs: s, cc, b, a, dp, x, y, u, pc
	groups: interrupt_return

        3c10       cwai  #16
	insn id: M680X_INS_CWAI
	operand_count: 1
		operands[0].type: IMMEDIATE = #16
			size: 1
			access: READ | WRITE
	reading from regs: cc, s, pc, u, y, x, dp, d
	writing to regs: cc, s

        3d         mul
	insn id: M680X_INS_MUL
	reading from regs: cc, a, b
	writing to regs: cc, a, b

        3f         swi
	insn id: M680X_INS_SWI
	reading from regs: cc, s, pc, u, y, x, dp, a, b
	writing to regs: cc, s, pc
	groups: interrupt

        40         nega
	insn id: M680X_INS_NEGA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, a
	writing to regs: cc, a

        43         coma
	insn id: M680X_INS_COMA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, a
	writing to regs: cc, a

        44         lsra
	insn id: M680X_INS_LSRA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, a
	writing to regs: cc, a

        46         rora
	insn id: M680X_INS_RORA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, a
	writing to regs: cc, a

        47         asra
	insn id: M680X_INS_ASRA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, a
	writing to regs: cc, a

        48         lsla
	insn id: M680X_INS_LSLA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, a
	writing to regs: cc, a

        49         rola
	insn id: M680X_INS_ROLA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, a
	writing to regs: cc, a

        4a         deca
	insn id: M680X_INS_DECA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, a
	writing to regs: cc, a

        4c         inca
	insn id: M680X_INS_INCA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, a
	writing to regs: cc, a

        4d         tsta
	insn id: M680X_INS_TSTA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc

        4f         clra
	insn id: M680X_INS_CLRA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
	reading from regs: cc
	writing to regs: cc, a

        50         negb
	insn id: M680X_INS_NEGB
	operand_count: 1
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, b
	writing to regs: cc, b

        53         comb
	insn id: M680X_INS_COMB
	operand_count: 1
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, b
	writing to regs: cc, b

        54         lsrb
	insn id: M680X_INS_LSRB
	operand_count: 1
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, b
	writing to regs: cc, b

        56         rorb
	insn id: M680X_INS_RORB
	operand_count: 1
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, b
	writing to regs: cc, b

        57         asrb
	insn id: M680X_INS_ASRB
	operand_count: 1
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, b
	writing to regs: cc, b

        58         lslb
	insn id: M680X_INS_LSLB
	operand_count: 1
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, b
	writing to regs: cc, b

        59         rolb
	insn id: M680X_INS_ROLB
	operand_count: 1
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, b
	writing to regs: cc, b

        5a         decb
	insn id: M680X_INS_DECB
	operand_count: 1
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, b
	writing to regs: cc, b

        5c         incb
	insn id: M680X_INS_INCB
	operand_count: 1
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, b
	writing to regs: cc, b

        5d         tstb
	insn id: M680X_INS_TSTB
	operand_count: 1
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc

        5f         clrb
	insn id: M680X_INS_CLRB
	operand_count: 1
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: WRITE
	reading from regs: cc
	writing to regs: cc, b

        6000       neg   0, x
	insn id: M680X_INS_NEG
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        6300       com   0, x
	insn id: M680X_INS_COM
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        6400       lsr   0, x
	insn id: M680X_INS_LSR
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        6600       ror   0, x
	insn id: M680X_INS_ROR
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        6700       asr   0, x
	insn id: M680X_INS_ASR
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        6800       lsl   0, x
	insn id: M680X_INS_LSL
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        6900       rol   0, x
	insn id: M680X_INS_ROL
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        6a00       dec   0, x
	insn id: M680X_INS_DEC
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        6c00       inc   0, x
	insn id: M680X_INS_INC
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        6d00       tst   0, x
	insn id: M680X_INS_TST
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc

        6e00       jmp   0, x
	insn id: M680X_INS_JMP
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
	reading from regs: x
	groups: jump

        6f00       clr   0, x
	insn id: M680X_INS_CLR
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: WRITE
	reading from regs: cc, x
	writing to regs: cc

        701000     neg   $1000
	insn id: M680X_INS_NEG
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        731000     com   $1000
	insn id: M680X_INS_COM
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        741000     lsr   $1000
	insn id: M680X_INS_LSR
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        761000     ror   $1000
	insn id: M680X_INS_ROR
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        771000     asr   $1000
	insn id: M680X_INS_ASR
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        781000     lsl   $1000
	insn id: M680X_INS_LSL
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        791000     rol   $1000
	insn id: M680X_INS_ROL
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        7a1000     dec   $1000
	insn id: M680X_INS_DEC
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        7c1000     inc   $1000
	insn id: M680X_INS_INC
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        7d1000     tst   $1000
	insn id: M680X_INS_TST
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc
	writing to regs: cc

        7e1000     jmp   $1000
	insn id: M680X_INS_JMP
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
	groups: jump

        7f1000     clr   $1000
	insn id: M680X_INS_CLR
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: WRITE
	reading from regs: cc
	writing to regs: cc

        8010       suba  #16
	insn id: M680X_INS_SUBA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        8110       cmpa  #16
	insn id: M680X_INS_CMPA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc

        8210       sbca  #16
	insn id: M680X_INS_SBCA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        831000     subd  #4096
	insn id: M680X_INS_SUBD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #4096
			size: 2
			access: READ
	reading from regs: cc, d
	writing to regs: cc, d

        8410       anda  #16
	insn id: M680X_INS_ANDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        8510       bita  #16
	insn id: M680X_INS_BITA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc

        8610       lda   #16
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc
	writing to regs: cc, a

        8810       eora  #16
	insn id: M680X_INS_EORA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        8910       adca  #16
	insn id: M680X_INS_ADCA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        8a10       ora   #16
	insn id: M680X_INS_ORA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        8b10       adda  #16
	insn id: M680X_INS_ADDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        8c1000     cmpx  #4096
	insn id: M680X_INS_CMPX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: READ
		operands[1].type: IMMEDIATE = #4096
			size: 2
			access: READ
	reading from regs: cc, x
	writing to regs: cc

0x10cd: 8d00       bsr   $10cf
	insn id: M680X_INS_BSR
	operand_count: 1
		operands[0].type: RELATIVE = 0x10cf
	reading from regs: s
	writing to regs: s
	groups: branch_relative, call

        8e1000     ldx   #4096
	insn id: M680X_INS_LDX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: IMMEDIATE = #4096
			size: 2
			access: READ
	reading from regs: cc
	writing to regs: cc, x

        9010       suba  $10
	insn id: M680X_INS_SUBA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        9110       cmpa  $10
	insn id: M680X_INS_CMPA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc

        9210       sbca  $10
	insn id: M680X_INS_SBCA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        9310       subd  $10
	insn id: M680X_INS_SUBD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 2
			access: READ
	reading from regs: cc, d
	writing to regs: cc, d

        9410       anda  $10
	insn id: M680X_INS_ANDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        9510       bita  $10
	insn id: M680X_INS_BITA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc

        9610       lda   $10
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc
	writing to regs: cc, a

        9710       sta   $10
	insn id: M680X_INS_STA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: DIRECT = 0x10
			size: 1
			access: WRITE
	reading from regs: cc, a
	writing to regs: cc

        9810       eora  $10
	insn id: M680X_INS_EORA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        9910       adca  $10
	insn id: M680X_INS_ADCA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        9a10       ora   $10
	insn id: M680X_INS_ORA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        9b10       adda  $10
	insn id: M680X_INS_ADDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        9c10       cmpx  $10
	insn id: M680X_INS_CMPX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: READ
		operands[1].type: DIRECT = 0x10
			size: 2
			access: READ
	reading from regs: cc, x
	writing to regs: cc

        9d10       jsr   $10
	insn id: M680X_INS_JSR
	operand_count: 1
		operands[0].type: DIRECT = 0x10
	reading from regs: s
	writing to regs: s
	groups: call

        9e10       ldx   $10
	insn id: M680X_INS_LDX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: DIRECT = 0x10
			size: 2
			access: READ
	reading from regs: cc
	writing to regs: cc, x

        9f10       stx   $10
	insn id: M680X_INS_STX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: READ
		operands[1].type: DIRECT = 0x10
			size: 2
			access: WRITE
	reading from regs: cc, x
	writing to regs: cc

        a000       suba  0, x
	insn id: M680X_INS_SUBA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        a100       cmpa  0, x
	insn id: M680X_INS_CMPA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc

        a200       sbca  0, x
	insn id: M680X_INS_SBCA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        a300       subd  0, x
	insn id: M680X_INS_SUBD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: READ
	reading from regs: cc, d, x
	writing to regs: cc, d

        a400       anda  0, x
	insn id: M680X_INS_ANDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        a500       bita  0, x
	insn id: M680X_INS_BITA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc

        a600       lda   0, x
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc, a

        a700       sta   0, x
	insn id: M680X_INS_STA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: WRITE
	reading from regs: cc, a, x
	writing to regs: cc

        a800       eora  0, x
	insn id: M680X_INS_EORA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        a900       adca  0, x
	insn id: M680X_INS_ADCA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        aa00       ora   0, x
	insn id: M680X_INS_ORA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        ab00       adda  0, x
	insn id: M680X_INS_ADDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        ac00       cmpx  0, x
	insn id: M680X_INS_CMPX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: READ
	reading from regs: cc, x
	writing to regs: cc

        ad00       jsr   0, x
	insn id: M680X_INS_JSR
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
	reading from regs: x, s
	writing to regs: s
	groups: call

        ae00       ldx   0, x
	insn id: M680X_INS_LDX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: READ
	reading from regs: cc, x
	writing to regs: cc, x

        af00       stx   0, x
	insn id: M680X_INS_STX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: WRITE
	reading from regs: cc, x
	writing to regs: cc

        b01000     suba  $1000
	insn id: M680X_INS_SUBA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        b11000     cmpa  $1000
	insn id: M680X_INS_CMPA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc

        b21000     sbca  $1000
	insn id: M680X_INS_SBCA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        b31000     subd  $1000
	insn id: M680X_INS_SUBD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: READ
	reading from regs: cc, d
	writing to regs: cc, d

        b41000     anda  $1000
	insn id: M680X_INS_ANDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        b51000     bita  $1000
	insn id: M680X_INS_BITA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc

        b61000     lda   $1000
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc
	writing to regs: cc, a

        b71000     sta   $1000
	insn id: M680X_INS_STA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: WRITE
	reading from regs: cc, a
	writing to regs: cc

        b81000     eora  $1000
	insn id: M680X_INS_EORA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        b91000     adca  $1000
	insn id: M680X_INS_ADCA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        ba1000     ora   $1000
	insn id: M680X_INS_ORA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        bb1000     adda  $1000
	insn id: M680X_INS_ADDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        bc1000     cmpx  $1000
	insn id: M680X_INS_CMPX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: READ
	reading from regs: cc, x
	writing to regs: cc

        bd1000     jsr   $1000
	insn id: M680X_INS_JSR
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
	reading from regs: s
	writing to regs: s
	groups: call

        be1000     ldx   $1000
	insn id: M680X_INS_LDX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: READ
	reading from regs: cc
	writing to regs: cc, x

        bf1000     stx   $1000
	insn id: M680X_INS_STX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: WRITE
	reading from regs: cc, x
	writing to regs: cc

        c010       subb  #16
	insn id: M680X_INS_SUBB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        c110       cmpb  #16
	insn id: M680X_INS_CMPB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc

        c210       sbcb  #16
	insn id: M680X_INS_SBCB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        c31000     addd  #4096
	insn id: M680X_INS_ADDD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #4096
			size: 2
			access: READ
	reading from regs: cc, d
	writing to regs: cc, d

        c410       andb  #16
	insn id: M680X_INS_ANDB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        c510       bitb  #16
	insn id: M680X_INS_BITB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc

        c610       ldb   #16
	insn id: M680X_INS_LDB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc
	writing to regs: cc, b

        c810       eorb  #16
	insn id: M680X_INS_EORB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        c910       adcb  #16
	insn id: M680X_INS_ADCB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        ca10       orb   #16
	insn id: M680X_INS_ORB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        cb10       addb  #16
	insn id: M680X_INS_ADDB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        cc1000     ldd   #4096
	insn id: M680X_INS_LDD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: IMMEDIATE = #4096
			size: 2
			access: READ
	reading from regs: cc
	writing to regs: cc, d

        ce1000     ldu   #4096
	insn id: M680X_INS_LDU
	operand_count: 2
		operands[0].type: REGISTER = u (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: IMMEDIATE = #4096
			size: 2
			access: READ
	reading from regs: cc
	writing to regs: cc, u

        d010       subb  $10
	insn id: M680X_INS_SUBB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        d110       cmpb  $10
	insn id: M680X_INS_CMPB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc

        d210       sbcb  $10
	insn id: M680X_INS_SBCB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        d310       addd  $10
	insn id: M680X_INS_ADDD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 2
			access: READ
	reading from regs: cc, d
	writing to regs: cc, d

        d410       andb  $10
	insn id: M680X_INS_ANDB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        d510       bitb  $10
	insn id: M680X_INS_BITB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc

        d610       ldb   $10
	insn id: M680X_INS_LDB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc
	writing to regs: cc, b

        d710       stb   $10
	insn id: M680X_INS_STB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: DIRECT = 0x10
			size: 1
			access: WRITE
	reading from regs: cc, b
	writing to regs: cc

        d810       eorb  $10
	insn id: M680X_INS_EORB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        d910       adcb  $10
	insn id: M680X_INS_ADCB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        da10       orb   $10
	insn id: M680X_INS_ORB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        db10       addb  $10
	insn id: M680X_INS_ADDB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        dc10       ldd   $10
	insn id: M680X_INS_LDD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: DIRECT = 0x10
			size: 2
			access: READ
	reading from regs: cc
	writing to regs: cc, d

        dd10       std   $10
	insn id: M680X_INS_STD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: READ
		operands[1].type: DIRECT = 0x10
			size: 2
			access: WRITE
	reading from regs: cc, d
	writing to regs: cc

        de10       ldu   $10
	insn id: M680X_INS_LDU
	operand_count: 2
		operands[0].type: REGISTER = u (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: DIRECT = 0x10
			size: 2
			access: READ
	reading from regs: cc
	writing to regs: cc, u

        df10       stu   $10
	insn id: M680X_INS_STU
	operand_count: 2
		operands[0].type: REGISTER = u (in mnemonic)
			size: 2
			access: READ
		operands[1].type: DIRECT = 0x10
			size: 2
			access: WRITE
	reading from regs: cc, u
	writing to regs: cc

        e000       subb  0, x
	insn id: M680X_INS_SUBB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, b, x
	writing to regs: cc, b

        e100       cmpb  0, x
	insn id: M680X_INS_CMPB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, b, x
	writing to regs: cc

        e200       sbcb  0, x
	insn id: M680X_INS_SBCB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, b, x
	writing to regs: cc, b

        e300       addd  0, x
	insn id: M680X_INS_ADDD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: READ
	reading from regs: cc, d, x
	writing to regs: cc, d

        e400       andb  0, x
	insn id: M680X_INS_ANDB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, b, x
	writing to regs: cc, b

        e500       bitb  0, x
	insn id: M680X_INS_BITB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, b, x
	writing to regs: cc

        e600       ldb   0, x
	insn id: M680X_INS_LDB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc, b

        e700       stb   0, x
	insn id: M680X_INS_STB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: WRITE
	reading from regs: cc, b, x
	writing to regs: cc

        e800       eorb  0, x
	insn id: M680X_INS_EORB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, b, x
	writing to regs: cc, b

        e900       adcb  0, x
	insn id: M680X_INS_ADCB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, b, x
	writing to regs: cc, b

        ea00       orb   0, x
	insn id: M680X_INS_ORB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, b, x
	writing to regs: cc, b

        eb00       addb  0, x
	insn id: M680X_INS_ADDB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, b, x
	writing to regs: cc, b

        ec00       ldd   0, x
	insn id: M680X_INS_LDD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: READ
	reading from regs: cc, x
	writing to regs: cc, d

        ed00       std   0, x
	insn id: M680X_INS_STD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: WRITE
	reading from regs: cc, d, x
	writing to regs: cc

        ee00       ldu   0, x
	insn id: M680X_INS_LDU
	operand_count: 2
		operands[0].type: REGISTER = u (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: READ
	reading from regs: cc, x
	writing to regs: cc, u

        ef00       stu   0, x
	insn id: M680X_INS_STU
	operand_count: 2
		operands[0].type: REGISTER = u (in mnemonic)
			size: 2
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: WRITE
	reading from regs: cc, u, x
	writing to regs: cc

        f01000     subb  $1000
	insn id: M680X_INS_SUBB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        f11000     cmpb  $1000
	insn id: M680X_INS_CMPB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc

        f21000     sbcb  $1000
	insn id: M680X_INS_SBCB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        f31000     addd  $1000
	insn id: M680X_INS_ADDD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: READ
	reading from regs: cc, d
	writing to regs: cc, d

        f41000     andb  $1000
	insn id: M680X_INS_ANDB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        f51000     bitb  $1000
	insn id: M680X_INS_BITB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc

        f61000     ldb   $1000
	insn id: M680X_INS_LDB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc
	writing to regs: cc, b

        f71000     stb   $1000
	insn id: M680X_INS_STB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: WRITE
	reading from regs: cc, b
	writing to regs: cc

        f81000     eorb  $1000
	insn id: M680X_INS_EORB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        f91000     adcb  $1000
	insn id: M680X_INS_ADCB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        fa1000     orb   $1000
	insn id: M680X_INS_ORB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        fb1000     addb  $1000
	insn id: M680X_INS_ADDB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        fc1000     ldd   $1000
	insn id: M680X_INS_LDD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: READ
	reading from regs: cc
	writing to regs: cc, d

        fd1000     std   $1000
	insn id: M680X_INS_STD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: WRITE
	reading from regs: cc, d
	writing to regs: cc

        fe1000     ldu   $1000
	insn id: M680X_INS_LDU
	operand_count: 2
		operands[0].type: REGISTER = u (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: READ
	reading from regs: cc
	writing to regs: cc, u

        ff1000     stu   $1000
	insn id: M680X_INS_STU
	operand_count: 2
		operands[0].type: REGISTER = u (in mnemonic)
			size: 2
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: WRITE
	reading from regs: cc, u
	writing to regs: cc

0x11cf: 10210000   lbrn  $11d3
	insn id: M680X_INS_LBRN
	operand_count: 1
		operands[0].type: RELATIVE = 0x11d3
	groups: branch_relative, jump

0x11d3: 10220000   lbhi  $11d7
	insn id: M680X_INS_LBHI
	operand_count: 1
		operands[0].type: RELATIVE = 0x11d7
	reading from regs: cc
	groups: branch_relative, jump

0x11d7: 10230000   lbls  $11db
	insn id: M680X_INS_LBLS
	operand_count: 1
		operands[0].type: RELATIVE = 0x11db
	reading from regs: cc
	groups: branch_relative, jump

0x11db: 10240000   lbcc  $11df
	insn id: M680X_INS_LBCC
	operand_count: 1
		operands[0].type: RELATIVE = 0x11df
	reading from regs: cc
	groups: branch_relative, jump

0x11df: 10250000   lbcs  $11e3
	insn id: M680X_INS_LBCS
	operand_count: 1
		operands[0].type: RELATIVE = 0x11e3
	reading from regs: cc
	groups: branch_relative, jump

0x11e3: 10260000   lbne  $11e7
	insn id: M680X_INS_LBNE
	operand_count: 1
		operands[0].type: RELATIVE = 0x11e7
	reading from regs: cc
	groups: branch_relative, jump

0x11e7: 10270000   lbeq  $11eb
	insn id: M680X_INS_LBEQ
	operand_count: 1
		operands[0].type: RELATIVE = 0x11eb
	reading from regs: cc
	groups: branch_relative, jump

0x11eb: 10280000   lbvc  $11ef
	insn id: M680X_INS_LBVC
	operand_count: 1
		operands[0].type: RELATIVE = 0x11ef
	reading from regs: cc
	groups: branch_relative, jump

0x11ef: 10290000   lbvs  $11f3
	insn id: M680X_INS_LBVS
	operand_count: 1
		operands[0].type: RELATIVE = 0x11f3
	reading from regs: cc
	groups: branch_relative, jump

0x11f3: 102a0000   lbpl  $11f7
	insn id: M680X_INS_LBPL
	operand_count: 1
		operands[0].type: RELATIVE = 0x11f7
	reading from regs: cc
	groups: branch_relative, jump

0x11f7: 102b0000   lbmi  $11fb
	insn id: M680X_INS_LBMI
	operand_count: 1
		operands[0].type: RELATIVE = 0x11fb
	reading from regs: cc
	groups: branch_relative, jump

0x11fb: 102c0000   lbge  $11ff
	insn id: M680X_INS_LBGE
	operand_count: 1
		operands[0].type: RELATIVE = 0x11ff
	reading from regs: cc
	groups: branch_relative, jump

0x11ff: 102d0000   lblt  $1203
	insn id: M680X_INS_LBLT
	operand_count: 1
		operands[0].type: RELATIVE = 0x1203
	reading from regs: cc
	groups: branch_relative, jump

0x1203: 102e0000   lbgt  $1207
	insn id: M680X_INS_LBGT
	operand_count: 1
		operands[0].type: RELATIVE = 0x1207
	reading from regs: cc
	groups: branch_relative, jump

0x1207: 102f0000   lble  $120b
	insn id: M680X_INS_LBLE
	operand_count: 1
		operands[0].type: RELATIVE = 0x120b
	reading from regs: cc
	groups: branch_relative, jump

        103f       swi2
	insn id: M680X_INS_SWI2
	reading from regs: cc, s, pc, u, y, x, dp, a, b
	writing to regs: cc, s, pc
	groups: interrupt

        10831000   cmpd  #4096
	insn id: M680X_INS_CMPD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: READ
		operands[1].type: IMMEDIATE = #4096
			size: 2
			access: READ
	reading from regs: cc, d
	writing to regs: cc

        109310     cmpd  $10
	insn id: M680X_INS_CMPD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: READ
		operands[1].type: DIRECT = 0x10
			size: 2
			access: READ
	reading from regs: cc, d
	writing to regs: cc

        10a3991000 cmpd  [4096, x]
	insn id: M680X_INS_CMPD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: READ
		operands[1].type: INDEXED INDIRECT
			base register: x
			offset: 4096
			offset bits: 16
			size: 2
			access: READ
	reading from regs: cc, d, x
	writing to regs: cc

        10b31000   cmpd  $1000
	insn id: M680X_INS_CMPD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: READ
	reading from regs: cc, d
	writing to regs: cc

        108c1000   cmpy  #4096
	insn id: M680X_INS_CMPY
	operand_count: 2
		operands[0].type: REGISTER = y (in mnemonic)
			size: 2
			access: READ
		operands[1].type: IMMEDIATE = #4096
			size: 2
			access: READ
	reading from regs: cc, y
	writing to regs: cc

        109c10     cmpy  $10
	insn id: M680X_INS_CMPY
	operand_count: 2
		operands[0].type: REGISTER = y (in mnemonic)
			size: 2
			access: READ
		operands[1].type: DIRECT = 0x10
			size: 2
			access: READ
	reading from regs: cc, y
	writing to regs: cc

        10ac991000 cmpy  [4096, x]
	insn id: M680X_INS_CMPY
	operand_count: 2
		operands[0].type: REGISTER = y (in mnemonic)
			size: 2
			access: READ
		operands[1].type: INDEXED INDIRECT
			base register: x
			offset: 4096
			offset bits: 16
			size: 2
			access: READ
	reading from regs: cc, y, x
	writing to regs: cc

        10bc1000   cmpy  $1000
	insn id: M680X_INS_CMPY
	operand_count: 2
		operands[0].type: REGISTER = y (in mnemonic)
			size: 2
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: READ
	reading from regs: cc, y
	writing to regs: cc

        10ce1000   lds   #4096
	insn id: M680X_INS_LDS
	operand_count: 2
		operands[0].type: REGISTER = s (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: IMMEDIATE = #4096
			size: 2
			access: READ
	reading from regs: cc
	writing to regs: cc, s

        10de10     lds   $10
	insn id: M680X_INS_LDS
	operand_count: 2
		operands[0].type: REGISTER = s (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: DIRECT = 0x10
			size: 2
			access: READ
	reading from regs: cc
	writing to regs: cc, s

        10ee991000 lds   [4096, x]
	insn id: M680X_INS_LDS
	operand_count: 2
		operands[0].type: REGISTER = s (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: INDEXED INDIRECT
			base register: x
			offset: 4096
			offset bits: 16
			size: 2
			access: READ
	reading from regs: cc, x
	writing to regs: cc, s

        10fe1000   lds   $1000
	insn id: M680X_INS_LDS
	operand_count: 2
		operands[0].type: REGISTER = s (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: READ
	reading from regs: cc
	writing to regs: cc, s

        10df10     sts   $10
	insn id: M680X_INS_STS
	operand_count: 2
		operands[0].type: REGISTER = s (in mnemonic)
			size: 2
			access: READ
		operands[1].type: DIRECT = 0x10
			size: 2
			access: WRITE
	reading from regs: cc, s
	writing to regs: cc

        10ef991000 sts   [4096, x]
	insn id: M680X_INS_STS
	operand_count: 2
		operands[0].type: REGISTER = s (in mnemonic)
			size: 2
			access: READ
		operands[1].type: INDEXED INDIRECT
			base register: x
			offset: 4096
			offset bits: 16
			size: 2
			access: WRITE
	reading from regs: cc, s, x
	writing to regs: cc

        10ff1000   sts   $1000
	insn id: M680X_INS_STS
	operand_count: 2
		operands[0].type: REGISTER = s (in mnemonic)
			size: 2
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: WRITE
	reading from regs: cc, s
	writing to regs: cc

        113f       swi3
	insn id: M680X_INS_SWI3
	reading from regs: cc, s, pc, u, y, x, dp, a, b
	writing to regs: cc, s, pc
	groups: interrupt

        11831000   cmpu  #4096
	insn id: M680X_INS_CMPU
	operand_count: 2
		operands[0].type: REGISTER = u (in mnemonic)
			size: 2
			access: READ
		operands[1].type: IMMEDIATE = #4096
			size: 2
			access: READ
	reading from regs: cc, u
	writing to regs: cc

        119310     cmpu  $10
	insn id: M680X_INS_CMPU
	operand_count: 2
		operands[0].type: REGISTER = u (in mnemonic)
			size: 2
			access: READ
		operands[1].type: DIRECT = 0x10
			size: 2
			access: READ
	reading from regs: cc, u
	writing to regs: cc

        11a3991000 cmpu  [4096, x]
	insn id: M680X_INS_CMPU
	operand_count: 2
		operands[0].type: REGISTER = u (in mnemonic)
			size: 2
			access: READ
		operands[1].type: INDEXED INDIRECT
			base register: x
			offset: 4096
			offset bits: 16
			size: 2
			access: READ
	reading from regs: cc, u, x
	writing to regs: cc

        11b31000   cmpu  $1000
	insn id: M680X_INS_CMPU
	operand_count: 2
		operands[0].type: REGISTER = u (in mnemonic)
			size: 2
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: READ
	reading from regs: cc, u
	writing to regs: cc

        118c1000   cmps  #4096
	insn id: M680X_INS_CMPS
	operand_count: 2
		operands[0].type: REGISTER = s (in mnemonic)
			size: 2
			access: READ
		operands[1].type: IMMEDIATE = #4096
			size: 2
			access: READ
	reading from regs: cc, s
	writing to regs: cc

        119c10     cmps  $10
	insn id: M680X_INS_CMPS
	operand_count: 2
		operands[0].type: REGISTER = s (in mnemonic)
			size: 2
			access: READ
		operands[1].type: DIRECT = 0x10
			size: 2
			access: READ
	reading from regs: cc, s
	writing to regs: cc

        11ac991000 cmps  [4096, x]
	insn id: M680X_INS_CMPS
	operand_count: 2
		operands[0].type: REGISTER = s (in mnemonic)
			size: 2
			access: READ
		operands[1].type: INDEXED INDIRECT
			base register: x
			offset: 4096
			offset bits: 16
			size: 2
			access: READ
	reading from regs: cc, s, x
	writing to regs: cc

        11bc1000   cmps  $1000
	insn id: M680X_INS_CMPS
	operand_count: 2
		operands[0].type: REGISTER = s (in mnemonic)
			size: 2
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: READ
	reading from regs: cc, s
	writing to regs: cc

        a607       lda   7, x
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 7
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc, a

        a627       lda   7, y
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: y
			offset: 7
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, y
	writing to regs: cc, a

        a647       lda   7, u
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: u
			offset: 7
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, u
	writing to regs: cc, a

        a667       lda   7, s
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: s
			offset: 7
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, s
	writing to regs: cc, a

        a60f       lda   15, x
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 15
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc, a

        a610       lda   -16, x
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset: -16
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc, a

        a680       lda   , x+
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			post increment: 1
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc, a, x

        a681       lda   , x++
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			post increment: 2
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc, a, x

        a682       lda   , -x
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			pre decrement: 1
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc, a, x

        a683       lda   , --x
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			pre decrement: 2
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc, a, x

        a684       lda   , x
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc, a

        a685       lda   b, x
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset register: b
			size: 1
			access: READ
	reading from regs: cc, x, b
	writing to regs: cc, a

        a686       lda   a, x
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset register: a
			size: 1
			access: READ
	reading from regs: cc, x, a
	writing to regs: cc, a

        a6887f     lda   127, x
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 127
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc, a

        a68880     lda   -128, x
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset: -128
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc, a

        a6897fff   lda   32767, x
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 32767
			offset bits: 16
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc, a

        a6898000   lda   -32768, x
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset: -32768
			offset bits: 16
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc, a

        a68b       lda   d, x
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset register: d
			size: 1
			access: READ
	reading from regs: cc, x, d
	writing to regs: cc, a

0x1295: a68c10     lda   $1298, pcr
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: pc
			offset: 16
			offset address: 0x1298
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, pc
	writing to regs: cc, a

0x1298: a68d1000   lda   $229c, pcr
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: pc
			offset: 4096
			offset address: 0x229c
			offset bits: 16
			size: 1
			access: READ
	reading from regs: cc, pc
	writing to regs: cc, a

        a691       lda   [, x++]
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED INDIRECT
			base register: x
			post increment: 2
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc, a, x

        a693       lda   [, --x]
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED INDIRECT
			base register: x
			pre decrement: 2
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc, a, x

        a694       lda   [, x]
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED INDIRECT
			base register: x
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc, a

        a695       lda   [b, x]
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED INDIRECT
			base register: x
			offset register: b
			size: 1
			access: READ
	reading from regs: cc, x, b
	writing to regs: cc, a

        a696       lda   [a, x]
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED INDIRECT
			base register: x
			offset register: a
			size: 1
			access: READ
	reading from regs: cc, x, a
	writing to regs: cc, a

        a6987f     lda   [127, x]
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED INDIRECT
			base register: x
			offset: 127
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc, a

        a69880     lda   [-128, x]
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED INDIRECT
			base register: x
			offset: -128
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc, a

        a6997fff   lda   [32767, x]
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED INDIRECT
			base register: x
			offset: 32767
			offset bits: 16
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc, a

        a6998000   lda   [-32768, x]
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED INDIRECT
			base register: x
			offset: -32768
			offset bits: 16
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc, a

        a69b       lda   [d, x]
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED INDIRECT
			base register: x
			offset register: d
			size: 1
			access: READ
	reading from regs: cc, x, d
	writing to regs: cc, a

0x12b6: a69c10     lda   [$12b9, pcr]
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED INDIRECT
			base register: pc
			offset: 16
			offset address: 0x12b9
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, pc
	writing to regs: cc, a

0x12b9: a69d1000   lda   [$22bd, pcr]
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED INDIRECT
			base register: pc
			offset: 4096
			offset address: 0x22bd
			offset bits: 16
			size: 1
			access: READ
	reading from regs: cc, pc
	writing to regs: cc, a

        a69f1000   lda   [$1000]
	insn id: M680X_INS_LDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: EXTENDED INDIRECT = 0x1000
			size: 1
			access: READ
	reading from regs: cc
	writing to regs: cc, a

0x12c1

*********************
Platform: M680X_M6809_ILLEGAL
Code: 0x01 0x02 0x05 0x0b 0x14 0x15 0x18 0x1b 0x38 0x3e 0x41 0x42 0x45 0x4b 0x4e 0x51 0x52 0x55 0x5b 0x5e 0x61 0x62 0x65 0x6b 0x71 0x72 0x75 0x7b 0x87 0x8f 0xc7 0xcd 0xcf 0x1e 0x06 0x12 0x1e 0x07 0x12 0x1e 0x8c 0x12 0x12 0x1e 0x8d 0x12 0x1e 0x8e 0x12 0x12 0x1e 0x8f 0x12 0x1e 0x60 0x12 0x1e 0x70 0x12 0x12 0x1e 0xc8 0x12 0x1e 0xd8 0x12 0x1e 0xe8 0x12 0x1e 0xf8 0x12 0x12 0x1f 0x0f 0x12 0xa6 0x87 0xa6 0xa7 0x12 0xa6 0xc7 0xa6 0xe7 0x12 0xa6 0x8a 0x12 0xa6 0xaa 0x12 0xa6 0xca 0x12 0xa6 0xea 0x12 0xa6 0x8e 0x12 0x12 0xa6 0xae 0x12 0xa6 0xce 0x12 0x12 0xa6 0xee 0x12 0xa6 0x8f 0xa6 0xaf 0x12 0xa6 0xcf 0xa6 0xef 0x12 0xa6 0x97 0x12 0xa6 0xb7 0x12 0x12 0xa6 0xd7 0x12 0xa6 0xf7 0x12 0x12 0xa6 0x90 0x12 0xa6 0xb0 0x12 0x12 0xa6 0xd0 0x12 0xa6 0xf0 0x12 0x12 0xa6 0x92 0x12 0xa6 0xb2 0x12 0x12 0xa6 0xd2 0x12 0xa6 0xf2 0x12 0x12 0xa6 0x97 0x12 0xa6 0xb7 0x12 0x12 0xa6 0xd7 0x12 0xa6 0xf7 0x12 0x12 0xa6 0x9a 0x12 0xa6 0xba 0x12 0x12 0xa6 0xda 0x12 0xa6 0xfa 0x12 0x12 0xa6 0x9e 0x12 0xa6 0xbe 0x12 0x12 0xa6 0xde 0x12 0xa6 0xfe 0x12 0x12 0xa6 0xbf 0x12 0x12 0xa6 0xdf 0x12 0xa6 0xff 0x12 0x12 
Disasm:
        01         fcb   $01
        02         fcb   $02
        05         fcb   $05
        0b         fcb   $0b
        14         fcb   $14
        15         fcb   $15
        18         fcb   $18
        1b         fcb   $1b
        38         fcb   $38
        3e         fcb   $3e
        41         fcb   $41
        42         fcb   $42
        45         fcb   $45
        4b         fcb   $4b
        4e         fcb   $4e
        51         fcb   $51
        52         fcb   $52
        55         fcb   $55
        5b         fcb   $5b
        5e         fcb   $5e
        61         fcb   $61
        62         fcb   $62
        65         fcb   $65
        6b         fcb   $6b
        71         fcb   $71
        72         fcb   $72
        75         fcb   $75
        7b         fcb   $7b
        87         fcb   $87
        8f         fcb   $8f
        c7         fcb   $c7
        cd         fcb   $cd
        cf         fcb   $cf
        1e         fcb   $1e
        0612       ror   $12
        1e         fcb   $1e
        0712       asr   $12
        1e         fcb   $1e
        8c1212     cmpx  #4626
        1e         fcb   $1e
        8d12       bsr   $1040
        1e         fcb   $1e
        8e1212     ldx   #4626
        1e         fcb   $1e
        8f         fcb   $8f
        12         nop
        1e         fcb   $1e
        6012       neg   -14, x
        1e         fcb   $1e
        701212     neg   $1212
        1e         fcb   $1e
        c812       eorb  #18
        1e         fcb   $1e
        d812       eorb  $12
        1e         fcb   $1e
        e812       eorb  -14, x
        1e         fcb   $1e
        f81212     eorb  $1212
        1f         fcb   $1f
        0f12       clr   $12
        a6         fcb   $a6
        87         fcb   $87
        a6         fcb   $a6
        a712       sta   -14, x
        a6         fcb   $a6
        c7         fcb   $c7
        a6         fcb   $a6
        e712       stb   -14, x
        a6         fcb   $a6
        8a12       ora   #18
        a6         fcb   $a6
        aa12       ora   -14, x
        a6         fcb   $a6
        ca12       orb   #18
        a6         fcb   $a6
        ea12       orb   -14, x
        a6         fcb   $a6
        8e1212     ldx   #4626
        a6         fcb   $a6
        ae12       ldx   -14, x
        a6         fcb   $a6
        ce1212     ldu   #4626
        a6         fcb   $a6
        ee12       ldu   -14, x
        a6         fcb   $a6
        8f         fcb   $8f
        a6         fcb   $a6
        af12       stx   -14, x
        a6         fcb   $a6
        cf         fcb   $cf
        a6         fcb   $a6
        ef12       stu   -14, x
        a6         fcb   $a6
        9712       sta   $12
        a6         fcb   $a6
        b71212     sta   $1212
        a6         fcb   $a6
        d712       stb   $12
        a6         fcb   $a6
        f71212     stb   $1212
        a6         fcb   $a6
        9012       suba  $12
        a6         fcb   $a6
        b01212     suba  $1212
        a6         fcb   $a6
        d012       subb  $12
        a6         fcb   $a6
        f01212     subb  $1212
        a6         fcb   $a6
        9212       sbca  $12
        a6         fcb   $a6
        b21212     sbca  $1212
        a6         fcb   $a6
        d212       sbcb  $12
        a6         fcb   $a6
        f21212     sbcb  $1212
        a6         fcb   $a6
        9712       sta   $12
        a6         fcb   $a6
        b71212     sta   $1212
        a6         fcb   $a6
        d712       stb   $12
        a6         fcb   $a6
        f71212     stb   $1212
        a6         fcb   $a6
        9a12       ora   $12
        a6         fcb   $a6
        ba1212     ora   $1212
        a6         fcb   $a6
        da12       orb   $12
        a6         fcb   $a6
        fa1212     orb   $1212
        a6         fcb   $a6
        9e12       ldx   $12
        a6         fcb   $a6
        be1212     ldx   $1212
        a6         fcb   $a6
        de12       ldu   $12
        a6         fcb   $a6
        fe1212     ldu   $1212
        a6         fcb   $a6
        bf1212     stx   $1212
        a6         fcb   $a6
        df12       stu   $12
        a6         fcb   $a6
        ff1212     stu   $1212
0x10d9

