*********************
Platform: M680X_M6800
Code: 0x01 0x06 0x07 0x08 0x09 0x0a 0x0b 0x0c 0x0d 0x0e 0x0f 0x10 0x11 0x16 0x17 0x19 0x1b 0x20 0xfe 0x22 0x00 0x23 0x00 0x24 0x00 0x25 0x00 0x26 0x00 0x27 0x00 0x28 0x00 0x29 0x00 0x2a 0x00 0x2b 0x00 0x2c 0x00 0x2d 0x00 0x2e 0x00 0x2f 0x00 0x30 0x31 0x32 0x33 0x34 0x35 0x36 0x37 0x39 0x3b 0x3e 0x3f 0x40 0x43 0x44 0x46 0x47 0x48 0x49 0x4a 0x4c 0x4d 0x4f 0x50 0x53 0x54 0x56 0x57 0x58 0x59 0x5a 0x5c 0x5d 0x5f 0x60 0x7f 0x63 0x7f 0x64 0x7f 0x66 0x7f 0x67 0x7f 0x68 0x7f 0x69 0x7f 0x6a 0x7f 0x6c 0x7f 0x6d 0x7f 0x6e 0x7f 0x6f 0x7f 0x70 0x10 0x00 0x73 0x10 0x00 0x74 0x10 0x00 0x76 0x10 0x00 0x77 0x10 0x00 0x78 0x10 0x00 0x79 0x10 0x00 0x7a 0x10 0x00 0x7c 0x10 0x00 0x7d 0x10 0x00 0x7e 0x10 0x00 0x7f 0x10 0x00 0x80 0x10 0x81 0x10 0x82 0x10 0x84 0x10 0x85 0x10 0x86 0x10 0x88 0x10 0x89 0x10 0x8a 0x10 0x8b 0x10 0x8c 0x10 0x00 0x8d 0x10 0x8e 0x10 0x00 0x90 0x10 0x91 0x10 0x92 0x10 0x94 0x10 0x95 0x10 0x96 0x10 0x97 0x10 0x98 0x10 0x99 0x10 0x9a 0x10 0x9b 0x10 0x9c 0x10 0x9e 0x10 0x9f 0x10 0xa0 0x10 0xa1 0x10 0xa2 0x10 0xa4 0x10 0xa5 0x10 0xa6 0x10 0xa7 0x10 0xa8 0x10 0xa9 0x10 0xaa 0x10 0xab 0x10 0xac 0x10 0xad 0x10 0xae 0x10 0xaf 0x10 0xb0 0x10 0x00 0xb1 0x10 0x00 0xb2 0x10 0x00 0xb4 0x10 0x00 0xb5 0x10 0x00 0xb6 0x10 0x00 0xb7 0x10 0x00 0xb8 0x10 0x00 0xb9 0x10 0x00 0xba 0x10 0x00 0xbb 0x10 0x00 0xbc 0x10 0x00 0xbd 0x10 0x00 0xbe 0x10 0x00 0xbf 0x10 0x00 0xc0 0x10 0xc1 0x10 0xc2 0x00 0xc4 0x10 0xc5 0x00 0xc6 0x10 0xc8 0x10 0xc9 0x10 0xca 0x10 0xcb 0x10 0xce 0x10 0x00 0xd0 0x10 0xd1 0x10 0xd2 0x00 0xd4 0x10 0xd5 0x00 0xd6 0x10 0xd7 0x10 0xd8 0x10 0xd9 0x10 0xda 0x10 0xdb 0x10 0xde 0x10 0xdf 0x10 0xe0 0x10 0xe1 0x10 0xe2 0x10 0xe4 0x10 0xe5 0x10 0xe6 0x10 0xe7 0x10 0xe8 0x10 0xe9 0x10 0xea 0x10 0xeb 0x10 0xee 0x10 0xef 0x10 0xf0 0x10 0x00 0xf1 0x10 0x00 0xf2 0x10 0x00 0xf4 0x10 0x00 0xf5 0x10 0x00 0xf6 0x10 0x00 0xf7 0x10 0x00 0xf8 0x10 0x00 0xf9 0x10 0x00 0xfa 0x10 0x00 0xfb 0x10 0x00 0xfe 0x10 0x00 0xff 0x10 0x00 
Disasm:
        01         nop
	insn id: M680X_INS_NOP

        06         tap
	insn id: M680X_INS_TAP
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: REGISTER = cc (in mnemonic)
			size: 1
			access: WRITE
	reading from regs: a
	writing to regs: cc

        07         tpa
	insn id: M680X_INS_TPA
	operand_count: 2
		operands[0].type: REGISTER = cc (in mnemonic)
			size: 1
			access: READ
		operands[1].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
	reading from regs: cc
	writing to regs: a

        08         inx
	insn id: M680X_INS_INX
	operand_count: 1
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc, x

        09         dex
	insn id: M680X_INS_DEX
	operand_count: 1
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc, x

        0a         clv
	insn id: M680X_INS_CLV
	reading from regs: cc
	writing to regs: cc

        0b         sev
	insn id: M680X_INS_SEV
	reading from regs: cc
	writing to regs: cc

        0c         clc
	insn id: M680X_INS_CLC
	reading from regs: cc
	writing to regs: cc

        0d         sec
	insn id: M680X_INS_SEC
	reading from regs: cc
	writing to regs: cc

        0e         cli
	insn id: M680X_INS_CLI
	reading from regs: cc
	writing to regs: cc

        0f         sei
	insn id: M680X_INS_SEI
	reading from regs: cc
	writing to regs: cc

        10         sba
	insn id: M680X_INS_SBA
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, b, a
	writing to regs: cc, a

        11         cba
	insn id: M680X_INS_CBA
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
	reading from regs: cc, b, a
	writing to regs: cc

        16         tab
	insn id: M680X_INS_TAB
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: REGISTER = b (in mnemonic)
			size: 1
			access: WRITE
	reading from regs: cc, a
	writing to regs: cc, b

        17         tba
	insn id: M680X_INS_TBA
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
	reading from regs: cc, b
	writing to regs: cc, a

        19         daa
	insn id: M680X_INS_DAA
	reading from regs: cc, a
	writing to regs: cc, a

        1b         aba
	insn id: M680X_INS_ABA
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, b, a
	writing to regs: cc, a

0x1011: 20fe       bra   $1011
	insn id: M680X_INS_BRA
	operand_count: 1
		operands[0].type: RELATIVE = 0x1011
	groups: branch_relative, jump

0x1013: 2200       bhi   $1015
	insn id: M680X_INS_BHI
	operand_count: 1
		operands[0].type: RELATIVE = 0x1015
	reading from regs: cc
	groups: branch_relative, jump

0x1015: 2300       bls   $1017
	insn id: M680X_INS_BLS
	operand_count: 1
		operands[0].type: RELATIVE = 0x1017
	reading from regs: cc
	groups: branch_relative, jump

0x1017: 2400       bcc   $1019
	insn id: M680X_INS_BCC
	operand_count: 1
		operands[0].type: RELATIVE = 0x1019
	reading from regs: cc
	groups: branch_relative, jump

0x1019: 2500       bcs   $101b
	insn id: M680X_INS_BCS
	operand_count: 1
		operands[0].type: RELATIVE = 0x101b
	reading from regs: cc
	groups: branch_relative, jump

0x101b: 2600       bne   $101d
	insn id: M680X_INS_BNE
	operand_count: 1
		operands[0].type: RELATIVE = 0x101d
	reading from regs: cc
	groups: branch_relative, jump

0x101d: 2700       beq   $101f
	insn id: M680X_INS_BEQ
	operand_count: 1
		operands[0].type: RELATIVE = 0x101f
	reading from regs: cc
	groups: branch_relative, jump

0x101f: 2800       bvc   $1021
	insn id: M680X_INS_BVC
	operand_count: 1
		operands[0].type: RELATIVE = 0x1021
	reading from regs: cc
	groups: branch_relative, jump

0x1021: 2900       bvs   $1023
	insn id: M680X_INS_BVS
	operand_count: 1
		operands[0].type: RELATIVE = 0x1023
	reading from regs: cc
	groups: branch_relative, jump

0x1023: 2a00       bpl   $1025
	insn id: M680X_INS_BPL
	operand_count: 1
		operands[0].type: RELATIVE = 0x1025
	reading from regs: cc
	groups: branch_relative, jump

0x1025: 2b00       bmi   $1027
	insn id: M680X_INS_BMI
	operand_count: 1
		operands[0].type: RELATIVE = 0x1027
	reading from regs: cc
	groups: branch_relative, jump

0x1027: 2c00       bge   $1029
	insn id: M680X_INS_BGE
	operand_count: 1
		operands[0].type: RELATIVE = 0x1029
	reading from regs: cc
	groups: branch_relative, jump

0x1029: 2d00       blt   $102b
	insn id: M680X_INS_BLT
	operand_count: 1
		operands[0].type: RELATIVE = 0x102b
	reading from regs: cc
	groups: branch_relative, jump

0x102b: 2e00       bgt   $102d
	insn id: M680X_INS_BGT
	operand_count: 1
		operands[0].type: RELATIVE = 0x102d
	reading from regs: cc
	groups: branch_relative, jump

0x102d: 2f00       ble   $102f
	insn id: M680X_INS_BLE
	operand_count: 1
		operands[0].type: RELATIVE = 0x102f
	reading from regs: cc
	groups: branch_relative, jump

        30         tsx
	insn id: M680X_INS_TSX
	operand_count: 2
		operands[0].type: REGISTER = s (in mnemonic)
			size: 2
			access: READ
		operands[1].type: REGISTER = x (in mnemonic)
			size: 2
			access: WRITE
	reading from regs: s
	writing to regs: x

        31         ins
	insn id: M680X_INS_INS
	operand_count: 1
		operands[0].type: REGISTER = s (in mnemonic)
			size: 2
			access: READ | WRITE
	reading from regs: s
	writing to regs: s

        32         pula
	insn id: M680X_INS_PULA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
	reading from regs: s
	writing to regs: a, s

        33         pulb
	insn id: M680X_INS_PULB
	operand_count: 1
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: WRITE
	reading from regs: s
	writing to regs: b, s

        34         des
	insn id: M680X_INS_DES
	operand_count: 1
		operands[0].type: REGISTER = s (in mnemonic)
			size: 2
			access: READ | WRITE
	reading from regs: s
	writing to regs: s

        35         txs
	insn id: M680X_INS_TXS
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: READ
		operands[1].type: REGISTER = s (in mnemonic)
			size: 2
			access: WRITE
	reading from regs: x
	writing to regs: s

        36         psha
	insn id: M680X_INS_PSHA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
	reading from regs: a, s
	writing to regs: s

        37         pshb
	insn id: M680X_INS_PSHB
	operand_count: 1
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
	reading from regs: b, s
	writing to regs: s

        39         rts
	insn id: M680X_INS_RTS
	reading from regs: s
	writing to regs: s, pc
	groups: return

        3b         rti
	insn id: M680X_INS_RTI
	reading from regs: s
	writing to regs: s, cc, b, a, x, pc
	groups: interrupt_return

        3e         wai
	insn id: M680X_INS_WAI
	reading from regs: cc, s, pc, x, a, b
	writing to regs: cc, s

        3f         swi
	insn id: M680X_INS_SWI
	reading from regs: cc, s, pc, x, a, b
	writing to regs: cc, s, pc
	groups: interrupt

        40         nega
	insn id: M680X_INS_NEGA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, a
	writing to regs: cc, a

        43         coma
	insn id: M680X_INS_COMA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, a
	writing to regs: cc, a

        44         lsra
	insn id: M680X_INS_LSRA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, a
	writing to regs: cc, a

        46         rora
	insn id: M680X_INS_RORA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, a
	writing to regs: cc, a

        47         asra
	insn id: M680X_INS_ASRA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, a
	writing to regs: cc, a

        48         asla
	insn id: M680X_INS_ASLA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, a
	writing to regs: cc, a

        49         rola
	insn id: M680X_INS_ROLA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, a
	writing to regs: cc, a

        4a         deca
	insn id: M680X_INS_DECA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, a
	writing to regs: cc, a

        4c         inca
	insn id: M680X_INS_INCA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, a
	writing to regs: cc, a

        4d         tsta
	insn id: M680X_INS_TSTA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc

        4f         clra
	insn id: M680X_INS_CLRA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
	reading from regs: cc
	writing to regs: cc, a

        50         negb
	insn id: M680X_INS_NEGB
	operand_count: 1
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, b
	writing to regs: cc, b

        53         comb
	insn id: M680X_INS_COMB
	operand_count: 1
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, b
	writing to regs: cc, b

        54         lsrb
	insn id: M680X_INS_LSRB
	operand_count: 1
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, b
	writing to regs: cc, b

        56         rorb
	insn id: M680X_INS_RORB
	operand_count: 1
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, b
	writing to regs: cc, b

        57         asrb
	insn id: M680X_INS_ASRB
	operand_count: 1
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, b
	writing to regs: cc, b

        58         aslb
	insn id: M680X_INS_ASLB
	operand_count: 1
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, b
	writing to regs: cc, b

        59         rolb
	insn id: M680X_INS_ROLB
	operand_count: 1
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, b
	writing to regs: cc, b

        5a         decb
	insn id: M680X_INS_DECB
	operand_count: 1
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, b
	writing to regs: cc, b

        5c         incb
	insn id: M680X_INS_INCB
	operand_count: 1
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, b
	writing to regs: cc, b

        5d         tstb
	insn id: M680X_INS_TSTB
	operand_count: 1
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc

        5f         clrb
	insn id: M680X_INS_CLRB
	operand_count: 1
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: WRITE
	reading from regs: cc
	writing to regs: cc, b

        607f       neg   127, x
	insn id: M680X_INS_NEG
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 127
			offset bits: 8
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        637f       com   127, x
	insn id: M680X_INS_COM
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 127
			offset bits: 8
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        647f       lsr   127, x
	insn id: M680X_INS_LSR
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 127
			offset bits: 8
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        667f       ror   127, x
	insn id: M680X_INS_ROR
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 127
			offset bits: 8
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        677f       asr   127, x
	insn id: M680X_INS_ASR
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 127
			offset bits: 8
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        687f       asl   127, x
	insn id: M680X_INS_ASL
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 127
			offset bits: 8
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        697f       rol   127, x
	insn id: M680X_INS_ROL
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 127
			offset bits: 8
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        6a7f       dec   127, x
	insn id: M680X_INS_DEC
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 127
			offset bits: 8
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        6c7f       inc   127, x
	insn id: M680X_INS_INC
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 127
			offset bits: 8
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        6d7f       tst   127, x
	insn id: M680X_INS_TST
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 127
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc

        6e7f       jmp   127, x
	insn id: M680X_INS_JMP
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 127
			offset bits: 8
	reading from regs: x
	groups: jump

        6f7f       clr   127, x
	insn id: M680X_INS_CLR
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 127
			offset bits: 8
			size: 1
			access: WRITE
	reading from regs: cc, x
	writing to regs: cc

        701000     neg   $1000
	insn id: M680X_INS_NEG
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        731000     com   $1000
	insn id: M680X_INS_COM
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        741000     lsr   $1000
	insn id: M680X_INS_LSR
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        761000     ror   $1000
	insn id: M680X_INS_ROR
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        771000     asr   $1000
	insn id: M680X_INS_ASR
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        781000     asl   $1000
	insn id: M680X_INS_ASL
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        791000     rol   $1000
	insn id: M680X_INS_ROL
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        7a1000     dec   $1000
	insn id: M680X_INS_DEC
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        7c1000     inc   $1000
	insn id: M680X_INS_INC
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        7d1000     tst   $1000
	insn id: M680X_INS_TST
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc
	writing to regs: cc

        7e1000     jmp   $1000
	insn id: M680X_INS_JMP
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
	groups: jump

        7f1000     clr   $1000
	insn id: M680X_INS_CLR
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: WRITE
	reading from regs: cc
	writing to regs: cc

        8010       suba  #16
	insn id: M680X_INS_SUBA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        8110       cmpa  #16
	insn id: M680X_INS_CMPA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc

        8210       sbca  #16
	insn id: M680X_INS_SBCA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        8410       anda  #16
	insn id: M680X_INS_ANDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        8510       bita  #16
	insn id: M680X_INS_BITA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc

        8610       ldaa  #16
	insn id: M680X_INS_LDAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc
	writing to regs: cc, a

        8810       eora  #16
	insn id: M680X_INS_EORA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        8910       adca  #16
	insn id: M680X_INS_ADCA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        8a10       oraa  #16
	insn id: M680X_INS_ORAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        8b10       adda  #16
	insn id: M680X_INS_ADDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        8c1000     cpx   #4096
	insn id: M680X_INS_CPX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: READ
		operands[1].type: IMMEDIATE = #4096
			size: 2
			access: READ
	reading from regs: cc, x
	writing to regs: cc

0x10a4: 8d10       bsr   $10b6
	insn id: M680X_INS_BSR
	operand_count: 1
		operands[0].type: RELATIVE = 0x10b6
	reading from regs: s
	writing to regs: s
	groups: branch_relative, call

        8e1000     lds   #4096
	insn id: M680X_INS_LDS
	operand_count: 2
		operands[0].type: REGISTER = s (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: IMMEDIATE = #4096
			size: 2
			access: READ
	reading from regs: cc
	writing to regs: cc, s

        9010       suba  $10
	insn id: M680X_INS_SUBA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        9110       cmpa  $10
	insn id: M680X_INS_CMPA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc

        9210       sbca  $10
	insn id: M680X_INS_SBCA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        9410       anda  $10
	insn id: M680X_INS_ANDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        9510       bita  $10
	insn id: M680X_INS_BITA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc

        9610       ldaa  $10
	insn id: M680X_INS_LDAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc
	writing to regs: cc, a

        9710       staa  $10
	insn id: M680X_INS_STAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: DIRECT = 0x10
			size: 1
			access: WRITE
	reading from regs: cc, a
	writing to regs: cc

        9810       eora  $10
	insn id: M680X_INS_EORA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        9910       adca  $10
	insn id: M680X_INS_ADCA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        9a10       oraa  $10
	insn id: M680X_INS_ORAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        9b10       adda  $10
	insn id: M680X_INS_ADDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        9c10       cpx   $10
	insn id: M680X_INS_CPX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: READ
		operands[1].type: DIRECT = 0x10
			size: 2
			access: READ
	reading from regs: cc, x
	writing to regs: cc

        9e10       lds   $10
	insn id: M680X_INS_LDS
	operand_count: 2
		operands[0].type: REGISTER = s (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: DIRECT = 0x10
			size: 2
			access: READ
	reading from regs: cc
	writing to regs: cc, s

        9f10       sts   $10
	insn id: M680X_INS_STS
	operand_count: 2
		operands[0].type: REGISTER = s (in mnemonic)
			size: 2
			access: READ
		operands[1].type: DIRECT = 0x10
			size: 2
			access: WRITE
	reading from regs: cc, s
	writing to regs: cc

        a010       suba  16, x
	insn id: M680X_INS_SUBA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        a110       cmpa  16, x
	insn id: M680X_INS_CMPA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc

        a210       sbca  16, x
	insn id: M680X_INS_SBCA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        a410       anda  16, x
	insn id: M680X_INS_ANDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        a510       bita  16, x
	insn id: M680X_INS_BITA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc

        a610       ldaa  16, x
	insn id: M680X_INS_LDAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc, a

        a710       staa  16, x
	insn id: M680X_INS_STAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 1
			access: WRITE
	reading from regs: cc, a, x
	writing to regs: cc

        a810       eora  16, x
	insn id: M680X_INS_EORA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        a910       adca  16, x
	insn id: M680X_INS_ADCA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        aa10       oraa  16, x
	insn id: M680X_INS_ORAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        ab10       adda  16, x
	insn id: M680X_INS_ADDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        ac10       cpx   16, x
	insn id: M680X_INS_CPX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 2
			access: READ
	reading from regs: cc, x
	writing to regs: cc

        ad10       jsr   16, x
	insn id: M680X_INS_JSR
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
	reading from regs: x, s
	writing to regs: s
	groups: call

        ae10       lds   16, x
	insn id: M680X_INS_LDS
	operand_count: 2
		operands[0].type: REGISTER = s (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 2
			access: READ
	reading from regs: cc, x
	writing to regs: cc, s

        af10       sts   16, x
	insn id: M680X_INS_STS
	operand_count: 2
		operands[0].type: REGISTER = s (in mnemonic)
			size: 2
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 2
			access: WRITE
	reading from regs: cc, s, x
	writing to regs: cc

        b01000     suba  $1000
	insn id: M680X_INS_SUBA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        b11000     cmpa  $1000
	insn id: M680X_INS_CMPA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc

        b21000     sbca  $1000
	insn id: M680X_INS_SBCA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        b41000     anda  $1000
	insn id: M680X_INS_ANDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        b51000     bita  $1000
	insn id: M680X_INS_BITA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc

        b61000     ldaa  $1000
	insn id: M680X_INS_LDAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc
	writing to regs: cc, a

        b71000     staa  $1000
	insn id: M680X_INS_STAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: WRITE
	reading from regs: cc, a
	writing to regs: cc

        b81000     eora  $1000
	insn id: M680X_INS_EORA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        b91000     adca  $1000
	insn id: M680X_INS_ADCA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        ba1000     oraa  $1000
	insn id: M680X_INS_ORAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        bb1000     adda  $1000
	insn id: M680X_INS_ADDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        bc1000     cpx   $1000
	insn id: M680X_INS_CPX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: READ
	reading from regs: cc, x
	writing to regs: cc

        bd1000     jsr   $1000
	insn id: M680X_INS_JSR
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
	reading from regs: s
	writing to regs: s
	groups: call

        be1000     lds   $1000
	insn id: M680X_INS_LDS
	operand_count: 2
		operands[0].type: REGISTER = s (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: READ
	reading from regs: cc
	writing to regs: cc, s

        bf1000     sts   $1000
	insn id: M680X_INS_STS
	operand_count: 2
		operands[0].type: REGISTER = s (in mnemonic)
			size: 2
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: WRITE
	reading from regs: cc, s
	writing to regs: cc

        c010       subb  #16
	insn id: M680X_INS_SUBB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        c110       cmpb  #16
	insn id: M680X_INS_CMPB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc

        c200       sbcb  #0
	insn id: M680X_INS_SBCB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #0
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        c410       andb  #16
	insn id: M680X_INS_ANDB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        c500       bitb  #0
	insn id: M680X_INS_BITB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: IMMEDIATE = #0
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc

        c610       ldab  #16
	insn id: M680X_INS_LDAB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc
	writing to regs: cc, b

        c810       eorb  #16
	insn id: M680X_INS_EORB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        c910       adcb  #16
	insn id: M680X_INS_ADCB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        ca10       orab  #16
	insn id: M680X_INS_ORAB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        cb10       addb  #16
	insn id: M680X_INS_ADDB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        ce1000     ldx   #4096
	insn id: M680X_INS_LDX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: IMMEDIATE = #4096
			size: 2
			access: READ
	reading from regs: cc
	writing to regs: cc, x

        d010       subb  $10
	insn id: M680X_INS_SUBB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        d110       cmpb  $10
	insn id: M680X_INS_CMPB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc

        d200       sbcb  $00
	insn id: M680X_INS_SBCB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x00
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        d410       andb  $10
	insn id: M680X_INS_ANDB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        d500       bitb  $00
	insn id: M680X_INS_BITB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: DIRECT = 0x00
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc

        d610       ldab  $10
	insn id: M680X_INS_LDAB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc
	writing to regs: cc, b

        d710       stab  $10
	insn id: M680X_INS_STAB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: DIRECT = 0x10
			size: 1
			access: WRITE
	reading from regs: cc, b
	writing to regs: cc

        d810       eorb  $10
	insn id: M680X_INS_EORB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        d910       adcb  $10
	insn id: M680X_INS_ADCB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        da10       orab  $10
	insn id: M680X_INS_ORAB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        db10       addb  $10
	insn id: M680X_INS_ADDB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        de10       ldx   $10
	insn id: M680X_INS_LDX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: DIRECT = 0x10
			size: 2
			access: READ
	reading from regs: cc
	writing to regs: cc, x

        df10       stx   $10
	insn id: M680X_INS_STX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: READ
		operands[1].type: DIRECT = 0x10
			size: 2
			access: WRITE
	reading from regs: cc, x
	writing to regs: cc

        e010       subb  16, x
	insn id: M680X_INS_SUBB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, b, x
	writing to regs: cc, b

        e110       cmpb  16, x
	insn id: M680X_INS_CMPB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, b, x
	writing to regs: cc

        e210       sbcb  16, x
	insn id: M680X_INS_SBCB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, b, x
	writing to regs: cc, b

        e410       andb  16, x
	insn id: M680X_INS_ANDB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, b, x
	writing to regs: cc, b

        e510       bitb  16, x
	insn id: M680X_INS_BITB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, b, x
	writing to regs: cc

        e610       ldab  16, x
	insn id: M680X_INS_LDAB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc, b

        e710       stab  16, x
	insn id: M680X_INS_STAB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 1
			access: WRITE
	reading from regs: cc, b, x
	writing to regs: cc

        e810       eorb  16, x
	insn id: M680X_INS_EORB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, b, x
	writing to regs: cc, b

        e910       adcb  16, x
	insn id: M680X_INS_ADCB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, b, x
	writing to regs: cc, b

        ea10       orab  16, x
	insn id: M680X_INS_ORAB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, b, x
	writing to regs: cc, b

        eb10       addb  16, x
	insn id: M680X_INS_ADDB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 1
			access: READ
	reading from regs: cc, b, x
	writing to regs: cc, b

        ee10       ldx   16, x
	insn id: M680X_INS_LDX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 2
			access: READ
	reading from regs: cc, x
	writing to regs: cc, x

        ef10       stx   16, x
	insn id: M680X_INS_STX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 8
			size: 2
			access: WRITE
	reading from regs: cc, x
	writing to regs: cc

        f01000     subb  $1000
	insn id: M680X_INS_SUBB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        f11000     cmpb  $1000
	insn id: M680X_INS_CMPB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc

        f21000     sbcb  $1000
	insn id: M680X_INS_SBCB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        f41000     andb  $1000
	insn id: M680X_INS_ANDB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        f51000     bitb  $1000
	insn id: M680X_INS_BITB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc

        f61000     ldab  $1000
	insn id: M680X_INS_LDAB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc
	writing to regs: cc, b

        f71000     stab  $1000
	insn id: M680X_INS_STAB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: WRITE
	reading from regs: cc, b
	writing to regs: cc

        f81000     eorb  $1000
	insn id: M680X_INS_EORB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        f91000     adcb  $1000
	insn id: M680X_INS_ADCB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        fa1000     orab  $1000
	insn id: M680X_INS_ORAB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        fb1000     addb  $1000
	insn id: M680X_INS_ADDB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        fe1000     ldx   $1000
	insn id: M680X_INS_LDX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: READ
	reading from regs: cc
	writing to regs: cc, x

        ff1000     stx   $1000
	insn id: M680X_INS_STX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: WRITE
	reading from regs: cc, x
	writing to regs: cc

0x1182

*********************
Platform: M680X_M6800_ILLEGAL
Code: 0x00 0x02 0x03 0x04 0x05 0x12 0x13 0x14 0x15 0x18 0x1a 0x1c 0x1d 0x1e 0x1f 0x21 0x00 0x38 0x3a 0x3c 0x3d 0x41 0x42 0x45 0x4b 0x4e 0x51 0x52 0x55 0x5b 0x5e 0x61 0x00 0x62 0x00 0x65 0x00 0x6b 0x00 0x71 0x00 0x00 0x72 0x00 0x00 0x75 0x00 0x00 0x7b 0x00 0x00 0x83 0x00 0x87 0x00 0x8f 0x00 0x93 0x00 0x9d 0x00 0xa3 0x00 0xb3 0x00 0x00 0xc3 0x00 0xc7 0x00 0xcc 0x00 0xcd 0x00 0xcf 0x00 0xd3 0x00 0xdc 0x00 0xdd 0x00 0xe3 0x00 0xec 0x00 0xed 0x00 0xf3 0x00 0xfc 0x00 0xfd 0x00 
Disasm:
        00         fcb   $00
        02         fcb   $02
        03         fcb   $03
        04         fcb   $04
        05         fcb   $05
        12         fcb   $12
        13         fcb   $13
        14         fcb   $14
        15         fcb   $15
        18         fcb   $18
        1a         fcb   $1a
        1c         fcb   $1c
        1d         fcb   $1d
        1e         fcb   $1e
        1f         fcb   $1f
        21         fcb   $21
        00         fcb   $00
        38         fcb   $38
        3a         fcb   $3a
        3c         fcb   $3c
        3d         fcb   $3d
        41         fcb   $41
        42         fcb   $42
        45         fcb   $45
        4b         fcb   $4b
        4e         fcb   $4e
        51         fcb   $51
        52         fcb   $52
        55         fcb   $55
        5b         fcb   $5b
        5e         fcb   $5e
        61         fcb   $61
        00         fcb   $00
        62         fcb   $62
        00         fcb   $00
        65         fcb   $65
        00         fcb   $00
        6b         fcb   $6b
        00         fcb   $00
        71         fcb   $71
        00         fcb   $00
        00         fcb   $00
        72         fcb   $72
        00         fcb   $00
        00         fcb   $00
        75         fcb   $75
        00         fcb   $00
        00         fcb   $00
        7b         fcb   $7b
        00         fcb   $00
        00         fcb   $00
        83         fcb   $83
        00         fcb   $00
        87         fcb   $87
        00         fcb   $00
        8f         fcb   $8f
        00         fcb   $00
        93         fcb   $93
        00         fcb   $00
        9d         fcb   $9d
        00         fcb   $00
        a3         fcb   $a3
        00         fcb   $00
        b3         fcb   $b3
        00         fcb   $00
        00         fcb   $00
        c3         fcb   $c3
        00         fcb   $00
        c7         fcb   $c7
        00         fcb   $00
        cc         fcb   $cc
        00         fcb   $00
        cd         fcb   $cd
        00         fcb   $00
        cf         fcb   $cf
        00         fcb   $00
        d3         fcb   $d3
        00         fcb   $00
        dc         fcb   $dc
        00         fcb   $00
        dd         fcb   $dd
        00         fcb   $00
        e3         fcb   $e3
        00         fcb   $00
        ec         fcb   $ec
        00         fcb   $00
        ed         fcb   $ed
        00         fcb   $00
        f3         fcb   $f3
        00         fcb   $00
        fc         fcb   $fc
        00         fcb   $00
        fd         fcb   $fd
        00         fcb   $00
0x105e

