*********************
Platform: M680X_CPU12
Code: 0x00 0x01 0x02 0x03 0x04 0x00 0x00 0x04 0x01 0xff 0x04 0x14 0x00 0x04 0x15 0xff 0x04 0x06 0x00 0x04 0x07 0x00 0x04 0x20 0x00 0x04 0x80 0x00 0x04 0xa0 0x00 0x04 0x40 0x00 0x04 0x60 0x00 0x05 0x00 0x06 0x10 0x00 0x07 0x00 0x08 0x09 0x0a 0x0b 0x0c 0x00 0x80 0x0d 0x00 0x80 0x0e 0x00 0x80 0x00 0x0f 0x00 0x80 0x00 0x10 0x80 0x11 0x12 0x13 0x14 0x80 0x15 0x00 0x16 0x10 0x00 0x17 0x00 0x19 0x00 0x1a 0x00 0x1b 0x00 0x1c 0x10 0x00 0x80 0x1d 0x10 0x00 0x80 0x1e 0x10 0x00 0x80 0x00 0x1f 0x10 0x00 0x80 0x00 0x20 0xfe 0x21 0x00 0x22 0x00 0x23 0x00 0x24 0x00 0x25 0x00 0x26 0x00 0x27 0x00 0x28 0x00 0x29 0x00 0x2a 0x00 0x2b 0x00 0x2c 0x00 0x2d 0x00 0x2e 0x00 0x2f 0x00 0x30 0x31 0x32 0x33 0x34 0x35 0x36 0x37 0x38 0x39 0x3a 0x3b 0x3c 0x3d 0x3e 0x3f 0x40 0x41 0x42 0x43 0x44 0x45 0x46 0x47 0x48 0x49 0x4a 0x10 0x00 0x04 0x4b 0x00 0x04 0x4c 0x7f 0x80 0x4d 0x7f 0x80 0x4e 0x7f 0x80 0x00 0x4f 0x7f 0x80 0x00 0x50 0x51 0x52 0x53 0x54 0x55 0x56 0x57 0x58 0x59 0x5a 0x7f 0x5b 0x7f 0x5c 0x7f 0x5d 0x7f 0x5e 0x7f 0x5f 0x7f 0x60 0x00 0x61 0x00 0x62 0x00 0x63 0x00 0x64 0x00 0x65 0x00 0x66 0x00 0x67 0x00 0x68 0x00 0x69 0x00 0x6a 0x00 0x6b 0x00 0x6c 0x00 0x6d 0x00 0x6e 0x00 0x6f 0x00 0x70 0x10 0x00 0x71 0x10 0x00 0x72 0x10 0x00 0x73 0x10 0x00 0x74 0x10 0x00 0x75 0x10 0x00 0x76 0x10 0x00 0x77 0x10 0x00 0x78 0x10 0x00 0x79 0x10 0x00 0x7a 0x10 0x00 0x7b 0x10 0x00 0x7c 0x10 0x00 0x7d 0x10 0x00 0x7e 0x10 0x00 0x7f 0x10 0x00 0x80 0x10 0x81 0x10 0x82 0x10 0x83 0x10 0x00 0x84 0x10 0x85 0x10 0x86 0x10 0x87 0x88 0x10 0x89 0x10 0x8a 0x10 0x8b 0x10 0x8c 0x10 0x00 0x8d 0x10 0x00 0x8e 0x10 0x00 0x8f 0x10 0x00 0x90 0x10 0x91 0x10 0x92 0x10 0x93 0x10 0x94 0x10 0x95 0x10 0x96 0x10 0x97 0x98 0x10 0x99 0x10 0x9a 0x10 0x9b 0x10 0x9c 0x10 0x9d 0x10 0x9e 0x10 0x9f 0x10 0xa0 0x00 0xa1 0x00 0xa2 0x00 0xa3 0x00 0xa4 0x00 0xa5 0x00 0xa6 0x00 0xa7 0xa8 0x00 0xa9 0x00 0xaa 0x00 0xab 0x00 0xac 0x00 0xad 0x00 0xae 0x00 0xaf 0x00 0xb0 0x10 0x00 0xb1 0x10 0x00 0xb2 0x10 0x00 0xb3 0x10 0x00 0xb4 0x10 0x00 0xb5 0x10 0x00 0xb6 0x10 0x00 0xb8 0x10 0x00 0xb9 0x10 0x00 0xba 0x10 0x00 0xbb 0x10 0x00 0xbc 0x10 0x00 0xbd 0x10 0x00 0xbe 0x10 0x00 0xbf 0x10 0x00 0xc0 0x10 0xc1 0x10 0xc2 0x10 0xc3 0x10 0x00 0xc4 0x10 0xc5 0x10 0xc6 0x10 0xc7 0xc8 0x10 0xc9 0x10 0xca 0x10 0xcb 0x10 0xcc 0x10 0x00 0xcd 0x10 0x00 0xce 0x10 0x00 0xcf 0x10 0x00 0xd0 0x10 0xd1 0x10 0xd2 0x10 0xd3 0x10 0xd4 0x10 0xd5 0x10 0xd6 0x10 0xd7 0xd8 0x10 0xd9 0x10 0xda 0x10 0xdb 0x10 0xdc 0x10 0xdd 0x10 0xde 0x10 0xdf 0x10 0xe0 0x00 0xe1 0x00 0xe2 0x00 0xe3 0x00 0xe4 0x00 0xe5 0x00 0xe6 0x00 0xe7 0x00 0xe8 0x00 0xe9 0x00 0xea 0x00 0xeb 0x00 0xec 0x00 0xed 0x00 0xee 0x00 0xef 0x00 0xf0 0x10 0x00 0xf1 0x10 0x00 0xf2 0x10 0x00 0xf3 0x10 0x00 0xf4 0x10 0x00 0xf5 0x10 0x00 0xf6 0x10 0x00 0xf7 0x10 0x00 0xf8 0x10 0x00 0xf9 0x10 0x00 0xfa 0x10 0x00 0xfb 0x10 0x00 0xfc 0x10 0x00 0xfd 0x10 0x00 0xfe 0x10 0x00 0xff 0x10 0x00 0xb7 0x20 0xb7 0x31 0xb7 0x52 0xb7 0x23 0xb7 0x53 0xb7 0x05 0xb7 0x75 0xb7 0xa0 0xb7 0xb1 0xb7 0xd2 0xb7 0xa3 0xb7 0xd3 0xb7 0x85 0xb7 0xf5 0xa6 0x0f 0xa6 0x50 0xa6 0x81 0xa6 0xdf 0xa6 0xe0 0xff 0xa6 0xf1 0x00 0xa6 0xf2 0x7f 0xff 0xa6 0xfa 0x80 0x00 0xa6 0xe3 0x7f 0xff 0xa6 0xeb 0x80 0x00 0xa6 0x20 0xa6 0x67 0xa6 0xaf 0xa6 0xa8 0xa6 0xe4 0xa6 0xed 0xa6 0xf6 0xa6 0xfe 0xa6 0xe7 0xa6 0xef 0xa6 0xf7 0xa6 0xff 0x18 0x00 0x00 0x30 0x39 0x18 0x00 0xe0 0x7f 0x30 0x39 0x18 0x00 0xe2 0x7f 0xff 0x30 0x39 0x18 0x01 0x00 0x10 0x00 0x18 0x01 0xe0 0x7f 0x10 0x00 0x18 0x01 0xe2 0x7f 0xff 0x10 0x00 0x18 0x02 0x00 0x00 0x18 0x02 0x00 0xe0 0x10 0x18 0x02 0x00 0xe2 0x10 0x00 0x18 0x02 0xe0 0x7b 0x00 0x18 0x02 0xe0 0x7b 0xe0 0x10 0x18 0x02 0xe0 0x7b 0xe2 0x10 0x00 0x18 0x02 0xe2 0x30 0x39 0x00 0x18 0x02 0xe2 0x30 0x39 0xe0 0x10 0x18 0x02 0xe2 0x30 0x39 0xe2 0x10 0x00 0x18 0x03 0x30 0x39 0x10 0x00 0x18 0x04 0x30 0x39 0x10 0x00 0x18 0x05 0x00 0x10 0x00 0x18 0x05 0xe0 0x7b 0x10 0x00 0x18 0x05 0xe2 0x30 0x39 0x10 0x00 0x18 0x06 0x18 0x07 0x18 0x08 0x00 0x7b 0x18 0x08 0xe0 0x7f 0x7b 0x18 0x08 0xe2 0x7f 0xff 0x7b 0x18 0x09 0x00 0x10 0x00 0x18 0x09 0xe0 0x7f 0x10 0x00 0x18 0x09 0xe2 0x7f 0xff 0x10 0x00 0x18 0x0a 0x00 0x00 0x18 0x0a 0x00 0xe0 0x10 0x18 0x0a 0x00 0xe2 0x10 0x00 0x18 0x0a 0xe0 0x7b 0x00 0x18 0x0a 0xe0 0x7b 0xe0 0x10 0x18 0x0a 0xe0 0x7b 0xe2 0x10 0x00 0x18 0x0a 0xe2 0x30 0x39 0x00 0x18 0x0a 0xe2 0x30 0x39 0xe0 0x10 0x18 0x0a 0xe2 0x30 0x39 0xe2 0x10 0x00 0x18 0x0b 0x7b 0x10 0x00 0x18 0x0c 0x30 0x39 0x10 0x00 0x18 0x0d 0x00 0x10 0x00 0x18 0x0d 0xe0 0x7b 0x10 0x00 0x18 0x0d 0xe2 0x30 0x39 0x10 0x00 0x18 0x0e 0x18 0x0f 0x18 0x10 0x18 0x11 0x18 0x12 0x10 0x00 0x18 0x13 0x18 0x14 0x18 0x15 0x18 0x16 0x18 0x17 0x18 0x18 0x00 0x18 0x19 0x00 0x18 0x1a 0x00 0x18 0x1b 0x00 0x18 0x1c 0x00 0x18 0x1d 0x00 0x18 0x1e 0x00 0x18 0x1f 0x00 0x18 0x20 0x00 0x00 0x18 0x21 0x00 0x00 0x18 0x22 0x00 0x00 0x18 0x23 0x00 0x00 0x18 0x24 0x00 0x00 0x18 0x25 0x00 0x00 0x18 0x26 0x00 0x00 0x18 0x27 0x00 0x00 0x18 0x28 0x00 0x00 0x18 0x29 0x00 0x00 0x18 0x2a 0x00 0x00 0x18 0x2b 0x00 0x00 0x18 0x2c 0x00 0x00 0x18 0x2d 0x00 0x00 0x18 0x2e 0x00 0x00 0x18 0x2f 0x00 0x00 0x18 0x3a 0x18 0x3b 0x18 0x3c 0x18 0x3d 0x00 0x18 0x3e 0x18 0x3f 0x00 
Disasm:
        00         bgnd
	insn id: M680X_INS_BGND

        01         mem
	insn id: M680X_INS_MEM
	reading from regs: cc, x, y, a
	writing to regs: cc, x, y

        02         iny
	insn id: M680X_INS_INY
	operand_count: 1
		operands[0].type: REGISTER = y (in mnemonic)
			size: 2
			access: READ | WRITE
	reading from regs: cc, y
	writing to regs: cc, y

        03         dey
	insn id: M680X_INS_DEY
	operand_count: 1
		operands[0].type: REGISTER = y (in mnemonic)
			size: 2
			access: READ | WRITE
	reading from regs: cc, y
	writing to regs: cc, y

0x1004: 040000     dbeq  a, $1007
	insn id: M680X_INS_DBEQ
	operand_count: 2
		operands[0].type: REGISTER = a
			size: 1
			access: READ | WRITE
		operands[1].type: RELATIVE = 0x1007
	reading from regs: a
	writing to regs: a
	groups: branch_relative, jump

0x1007: 0401ff     dbeq  b, $1109
	insn id: M680X_INS_DBEQ
	operand_count: 2
		operands[0].type: REGISTER = b
			size: 1
			access: READ | WRITE
		operands[1].type: RELATIVE = 0x1109
	reading from regs: b
	writing to regs: b
	groups: branch_relative, jump

0x100a: 041400     dbeq  d, $0f0d
	insn id: M680X_INS_DBEQ
	operand_count: 2
		operands[0].type: REGISTER = d
			size: 2
			access: READ | WRITE
		operands[1].type: RELATIVE = 0x0f0d
	reading from regs: d
	writing to regs: d
	groups: branch_relative, jump

0x100d: 0415ff     dbeq  x, $100f
	insn id: M680X_INS_DBEQ
	operand_count: 2
		operands[0].type: REGISTER = x
			size: 2
			access: READ | WRITE
		operands[1].type: RELATIVE = 0x100f
	reading from regs: x
	writing to regs: x
	groups: branch_relative, jump

0x1010: 040600     dbeq  y, $1013
	insn id: M680X_INS_DBEQ
	operand_count: 2
		operands[0].type: REGISTER = y
			size: 2
			access: READ | WRITE
		operands[1].type: RELATIVE = 0x1013
	reading from regs: y
	writing to regs: y
	groups: branch_relative, jump

0x1013: 040700     dbeq  s, $1016
	insn id: M680X_INS_DBEQ
	operand_count: 2
		operands[0].type: REGISTER = s
			size: 2
			access: READ | WRITE
		operands[1].type: RELATIVE = 0x1016
	reading from regs: s
	writing to regs: s
	groups: branch_relative, jump

0x1016: 042000     dbne  a, $1019
	insn id: M680X_INS_DBEQ
	operand_count: 2
		operands[0].type: REGISTER = a
			size: 1
			access: READ | WRITE
		operands[1].type: RELATIVE = 0x1019
	reading from regs: a
	writing to regs: a
	groups: branch_relative, jump

0x1019: 048000     ibeq  a, $101c
	insn id: M680X_INS_DBEQ
	operand_count: 2
		operands[0].type: REGISTER = a
			size: 1
			access: READ | WRITE
		operands[1].type: RELATIVE = 0x101c
	reading from regs: a
	writing to regs: a
	groups: branch_relative, jump

0x101c: 04a000     ibne  a, $101f
	insn id: M680X_INS_DBEQ
	operand_count: 2
		operands[0].type: REGISTER = a
			size: 1
			access: READ | WRITE
		operands[1].type: RELATIVE = 0x101f
	reading from regs: a
	writing to regs: a
	groups: branch_relative, jump

0x101f: 044000     tbeq  a, $1022
	insn id: M680X_INS_DBEQ
	operand_count: 2
		operands[0].type: REGISTER = a
			size: 1
			access: READ | WRITE
		operands[1].type: RELATIVE = 0x1022
	reading from regs: a
	writing to regs: a
	groups: branch_relative, jump

0x1022: 046000     tbne  a, $1025
	insn id: M680X_INS_DBEQ
	operand_count: 2
		operands[0].type: REGISTER = a
			size: 1
			access: READ | WRITE
		operands[1].type: RELATIVE = 0x1025
	reading from regs: a
	writing to regs: a
	groups: branch_relative, jump

        0500       jmp   0, x
	insn id: M680X_INS_JMP
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
	reading from regs: x
	groups: jump

        061000     jmp   $1000
	insn id: M680X_INS_JMP
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
	groups: jump

0x102a: 0700       bsr   $102c
	insn id: M680X_INS_BSR
	operand_count: 1
		operands[0].type: RELATIVE = 0x102c
	reading from regs: s
	writing to regs: s
	groups: branch_relative, call

        08         inx
	insn id: M680X_INS_INX
	operand_count: 1
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc, x

        09         dex
	insn id: M680X_INS_DEX
	operand_count: 1
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc, x

        0a         rtc
	insn id: M680X_INS_RTC
	reading from regs: s
	writing to regs: s, pc
	groups: return

        0b         rti
	insn id: M680X_INS_RTI
	reading from regs: s
	writing to regs: s, cc, b, a, x, y, pc
	groups: interrupt_return

        0c0080     bset  0, x; #-128
	insn id: M680X_INS_BSET
	operand_count: 2
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #-128
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc

        0d0080     bclr  0, x; #-128
	insn id: M680X_INS_BCLR
	operand_count: 2
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #-128
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc

0x1036: 0e008000   brset 0, x; #-128; $103a
	insn id: M680X_INS_BRSET
	operand_count: 3
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
		operands[1].type: IMMEDIATE = #-128
			size: 1
			access: READ
		operands[2].type: RELATIVE = 0x103a
	reading from regs: cc, x
	groups: branch_relative, jump

0x103a: 0f008000   brclr 0, x; #-128; $103e
	insn id: M680X_INS_BRCLR
	operand_count: 3
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
		operands[1].type: IMMEDIATE = #-128
			size: 1
			access: READ
		operands[2].type: RELATIVE = 0x103e
	reading from regs: cc, x
	groups: branch_relative, jump

        1080       andcc #-128
	insn id: M680X_INS_ANDCC
	operand_count: 2
		operands[0].type: REGISTER = cc (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #-128
			size: 1
			access: READ
	reading from regs: cc
	writing to regs: cc

        11         ediv
	insn id: M680X_INS_EDIV
	reading from regs: cc, d, y, x
	writing to regs: cc, d, y

        12         mul
	insn id: M680X_INS_MUL
	reading from regs: cc, a, b
	writing to regs: cc, a, b

        13         emul
	insn id: M680X_INS_EMUL
	reading from regs: cc, d, y
	writing to regs: cc, d, y

        1480       orcc  #-128
	insn id: M680X_INS_ORCC
	operand_count: 2
		operands[0].type: REGISTER = cc (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #-128
			size: 1
			access: READ
	reading from regs: cc
	writing to regs: cc

        1500       jsr   0, x
	insn id: M680X_INS_JSR
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
	reading from regs: x, s
	writing to regs: s
	groups: call

        161000     jsr   $1000
	insn id: M680X_INS_JSR
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
	reading from regs: s
	writing to regs: s
	groups: call

        1700       jsr   $00
	insn id: M680X_INS_JSR
	operand_count: 1
		operands[0].type: DIRECT = 0x00
	reading from regs: s
	writing to regs: s
	groups: call

        1900       leay  0, x
	insn id: M680X_INS_LEAY
	operand_count: 2
		operands[0].type: REGISTER = y (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: READ
	reading from regs: x
	writing to regs: y

        1a00       leax  0, x
	insn id: M680X_INS_LEAX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: READ
	reading from regs: x
	writing to regs: x

        1b00       leas  0, x
	insn id: M680X_INS_LEAS
	operand_count: 2
		operands[0].type: REGISTER = s (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: READ
	reading from regs: x
	writing to regs: s

        1c100080   bset  $1000, #-128
	insn id: M680X_INS_BSET
	operand_count: 2
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #-128
			size: 1
			access: READ
	reading from regs: cc
	writing to regs: cc

        1d100080   bclr  $1000, #-128
	insn id: M680X_INS_BCLR
	operand_count: 2
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #-128
			size: 1
			access: READ
	reading from regs: cc
	writing to regs: cc

0x105a: 1e10008000 brset $1000, #-128, $105f
	insn id: M680X_INS_BRSET
	operand_count: 3
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: READ
		operands[1].type: IMMEDIATE = #-128
			size: 1
			access: READ
		operands[2].type: RELATIVE = 0x105f
	reading from regs: cc
	groups: branch_relative, jump

0x105f: 1f10008000 brclr $1000, #-128, $1064
	insn id: M680X_INS_BRCLR
	operand_count: 3
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: READ
		operands[1].type: IMMEDIATE = #-128
			size: 1
			access: READ
		operands[2].type: RELATIVE = 0x1064
	reading from regs: cc
	groups: branch_relative, jump

0x1064: 20fe       bra   $1064
	insn id: M680X_INS_BRA
	operand_count: 1
		operands[0].type: RELATIVE = 0x1064
	groups: branch_relative, jump

0x1066: 2100       brn   $1068
	insn id: M680X_INS_BRN
	operand_count: 1
		operands[0].type: RELATIVE = 0x1068
	groups: branch_relative, jump

0x1068: 2200       bhi   $106a
	insn id: M680X_INS_BHI
	operand_count: 1
		operands[0].type: RELATIVE = 0x106a
	reading from regs: cc
	groups: branch_relative, jump

0x106a: 2300       bls   $106c
	insn id: M680X_INS_BLS
	operand_count: 1
		operands[0].type: RELATIVE = 0x106c
	reading from regs: cc
	groups: branch_relative, jump

0x106c: 2400       bcc   $106e
	insn id: M680X_INS_BCC
	operand_count: 1
		operands[0].type: RELATIVE = 0x106e
	reading from regs: cc
	groups: branch_relative, jump

0x106e: 2500       bcs   $1070
	insn id: M680X_INS_BCS
	operand_count: 1
		operands[0].type: RELATIVE = 0x1070
	reading from regs: cc
	groups: branch_relative, jump

0x1070: 2600       bne   $1072
	insn id: M680X_INS_BNE
	operand_count: 1
		operands[0].type: RELATIVE = 0x1072
	reading from regs: cc
	groups: branch_relative, jump

0x1072: 2700       beq   $1074
	insn id: M680X_INS_BEQ
	operand_count: 1
		operands[0].type: RELATIVE = 0x1074
	reading from regs: cc
	groups: branch_relative, jump

0x1074: 2800       bvc   $1076
	insn id: M680X_INS_BVC
	operand_count: 1
		operands[0].type: RELATIVE = 0x1076
	reading from regs: cc
	groups: branch_relative, jump

0x1076: 2900       bvs   $1078
	insn id: M680X_INS_BVS
	operand_count: 1
		operands[0].type: RELATIVE = 0x1078
	reading from regs: cc
	groups: branch_relative, jump

0x1078: 2a00       bpl   $107a
	insn id: M680X_INS_BPL
	operand_count: 1
		operands[0].type: RELATIVE = 0x107a
	reading from regs: cc
	groups: branch_relative, jump

0x107a: 2b00       bmi   $107c
	insn id: M680X_INS_BMI
	operand_count: 1
		operands[0].type: RELATIVE = 0x107c
	reading from regs: cc
	groups: branch_relative, jump

0x107c: 2c00       bge   $107e
	insn id: M680X_INS_BGE
	operand_count: 1
		operands[0].type: RELATIVE = 0x107e
	reading from regs: cc
	groups: branch_relative, jump

0x107e: 2d00       blt   $1080
	insn id: M680X_INS_BLT
	operand_count: 1
		operands[0].type: RELATIVE = 0x1080
	reading from regs: cc
	groups: branch_relative, jump

0x1080: 2e00       bgt   $1082
	insn id: M680X_INS_BGT
	operand_count: 1
		operands[0].type: RELATIVE = 0x1082
	reading from regs: cc
	groups: branch_relative, jump

0x1082: 2f00       ble   $1084
	insn id: M680X_INS_BLE
	operand_count: 1
		operands[0].type: RELATIVE = 0x1084
	reading from regs: cc
	groups: branch_relative, jump

        30         pulx
	insn id: M680X_INS_PULX
	operand_count: 1
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: WRITE
	reading from regs: s
	writing to regs: x, s

        31         puly
	insn id: M680X_INS_PULY
	operand_count: 1
		operands[0].type: REGISTER = y (in mnemonic)
			size: 2
			access: WRITE
	reading from regs: s
	writing to regs: y, s

        32         pula
	insn id: M680X_INS_PULA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
	reading from regs: s
	writing to regs: a, s

        33         pulb
	insn id: M680X_INS_PULB
	operand_count: 1
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: WRITE
	reading from regs: s
	writing to regs: b, s

        34         pshx
	insn id: M680X_INS_PSHX
	operand_count: 1
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: READ
	reading from regs: x, s
	writing to regs: s

        35         pshy
	insn id: M680X_INS_PSHY
	operand_count: 1
		operands[0].type: REGISTER = y (in mnemonic)
			size: 2
			access: READ
	reading from regs: y, s
	writing to regs: s

        36         psha
	insn id: M680X_INS_PSHA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
	reading from regs: a, s
	writing to regs: s

        37         pshb
	insn id: M680X_INS_PSHB
	operand_count: 1
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
	reading from regs: b, s
	writing to regs: s

        38         pulc
	insn id: M680X_INS_PULC
	operand_count: 1
		operands[0].type: REGISTER = cc (in mnemonic)
			size: 1
			access: WRITE
	reading from regs: s
	writing to regs: cc, s

        39         pshc
	insn id: M680X_INS_PSHC
	operand_count: 1
		operands[0].type: REGISTER = cc (in mnemonic)
			size: 1
			access: READ
	reading from regs: cc, s
	writing to regs: s

        3a         puld
	insn id: M680X_INS_PULD
	operand_count: 1
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: WRITE
	reading from regs: s
	writing to regs: d, s

        3b         pshd
	insn id: M680X_INS_PSHD
	operand_count: 1
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: READ
	reading from regs: d, s
	writing to regs: s

        3c         wavr
	insn id: M680X_INS_WAVR
	reading from regs: cc, a, b, x, y
	writing to regs: cc, b, x, y

        3d         rts
	insn id: M680X_INS_RTS
	reading from regs: s
	writing to regs: s, pc
	groups: return

        3e         wai
	insn id: M680X_INS_WAI
	reading from regs: cc, s, pc, x, a, b
	writing to regs: cc, s

        3f         swi
	insn id: M680X_INS_SWI
	reading from regs: cc, s, pc, y, x, a, b
	writing to regs: cc, s, pc
	groups: interrupt

        40         nega
	insn id: M680X_INS_NEGA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, a
	writing to regs: cc, a

        41         coma
	insn id: M680X_INS_COMA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, a
	writing to regs: cc, a

        42         inca
	insn id: M680X_INS_INCA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, a
	writing to regs: cc, a

        43         deca
	insn id: M680X_INS_DECA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, a
	writing to regs: cc, a

        44         lsra
	insn id: M680X_INS_LSRA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, a
	writing to regs: cc, a

        45         rola
	insn id: M680X_INS_ROLA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, a
	writing to regs: cc, a

        46         rora
	insn id: M680X_INS_RORA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, a
	writing to regs: cc, a

        47         asra
	insn id: M680X_INS_ASRA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, a
	writing to regs: cc, a

        48         asla
	insn id: M680X_INS_ASLA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, a
	writing to regs: cc, a

        49         lsrd
	insn id: M680X_INS_LSRD
	operand_count: 1
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: READ | WRITE
	reading from regs: cc, d
	writing to regs: cc, d

        4a100004   call  $1000, 4
	insn id: M680X_INS_CALL
	operand_count: 2
		operands[0].type: EXTENDED  = 0x1000
			size: 1
		operands[1].type: INDEX = 4
	reading from regs: s
	writing to regs: s
	groups: call

        4b0004     call  0, x; 4
	insn id: M680X_INS_CALL
	operand_count: 2
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
		operands[1].type: INDEX = 4
	reading from regs: x, s
	writing to regs: s
	groups: call

        4c7f80     bset  $7f, #-128
	insn id: M680X_INS_BSET
	operand_count: 2
		operands[0].type: DIRECT = 0x7f
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #-128
			size: 1
			access: READ
	reading from regs: cc
	writing to regs: cc

        4d7f80     bclr  $7f, #-128
	insn id: M680X_INS_BCLR
	operand_count: 2
		operands[0].type: DIRECT = 0x7f
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #-128
			size: 1
			access: READ
	reading from regs: cc
	writing to regs: cc

0x10ab: 4e7f8000   brset $7f, #-128, $10af
	insn id: M680X_INS_BRSET
	operand_count: 3
		operands[0].type: DIRECT = 0x7f
			size: 1
			access: READ
		operands[1].type: IMMEDIATE = #-128
			size: 1
			access: READ
		operands[2].type: RELATIVE = 0x10af
	reading from regs: cc
	groups: branch_relative, jump

0x10af: 4f7f8000   brclr $7f, #-128, $10b3
	insn id: M680X_INS_BRCLR
	operand_count: 3
		operands[0].type: DIRECT = 0x7f
			size: 1
			access: READ
		operands[1].type: IMMEDIATE = #-128
			size: 1
			access: READ
		operands[2].type: RELATIVE = 0x10b3
	reading from regs: cc
	groups: branch_relative, jump

        50         negb
	insn id: M680X_INS_NEGB
	operand_count: 1
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, b
	writing to regs: cc, b

        51         comb
	insn id: M680X_INS_COMB
	operand_count: 1
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, b
	writing to regs: cc, b

        52         incb
	insn id: M680X_INS_INCB
	operand_count: 1
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, b
	writing to regs: cc, b

        53         decb
	insn id: M680X_INS_DECB
	operand_count: 1
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, b
	writing to regs: cc, b

        54         lsrb
	insn id: M680X_INS_LSRB
	operand_count: 1
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, b
	writing to regs: cc, b

        55         rolb
	insn id: M680X_INS_ROLB
	operand_count: 1
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, b
	writing to regs: cc, b

        56         rorb
	insn id: M680X_INS_RORB
	operand_count: 1
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, b
	writing to regs: cc, b

        57         asrb
	insn id: M680X_INS_ASRB
	operand_count: 1
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, b
	writing to regs: cc, b

        58         aslb
	insn id: M680X_INS_ASLB
	operand_count: 1
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, b
	writing to regs: cc, b

        59         asld
	insn id: M680X_INS_ASLD
	operand_count: 1
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: READ | WRITE
	reading from regs: cc, d
	writing to regs: cc, d

        5a7f       staa  $7f
	insn id: M680X_INS_STAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: DIRECT = 0x7f
			size: 1
			access: WRITE
	reading from regs: cc, a
	writing to regs: cc

        5b7f       stab  $7f
	insn id: M680X_INS_STAB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: DIRECT = 0x7f
			size: 1
			access: WRITE
	reading from regs: cc, b
	writing to regs: cc

        5c7f       std   $7f
	insn id: M680X_INS_STD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: READ
		operands[1].type: DIRECT = 0x7f
			size: 2
			access: WRITE
	reading from regs: cc, d
	writing to regs: cc

        5d7f       sty   $7f
	insn id: M680X_INS_STY
	operand_count: 2
		operands[0].type: REGISTER = y (in mnemonic)
			size: 2
			access: READ
		operands[1].type: DIRECT = 0x7f
			size: 2
			access: WRITE
	reading from regs: cc, y
	writing to regs: cc

        5e7f       stx   $7f
	insn id: M680X_INS_STX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: READ
		operands[1].type: DIRECT = 0x7f
			size: 2
			access: WRITE
	reading from regs: cc, x
	writing to regs: cc

        5f7f       sts   $7f
	insn id: M680X_INS_STS
	operand_count: 2
		operands[0].type: REGISTER = s (in mnemonic)
			size: 2
			access: READ
		operands[1].type: DIRECT = 0x7f
			size: 2
			access: WRITE
	reading from regs: cc, s
	writing to regs: cc

        6000       neg   0, x
	insn id: M680X_INS_NEG
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        6100       com   0, x
	insn id: M680X_INS_COM
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        6200       inc   0, x
	insn id: M680X_INS_INC
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        6300       dec   0, x
	insn id: M680X_INS_DEC
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        6400       lsr   0, x
	insn id: M680X_INS_LSR
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        6500       rol   0, x
	insn id: M680X_INS_ROL
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        6600       ror   0, x
	insn id: M680X_INS_ROR
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        6700       asr   0, x
	insn id: M680X_INS_ASR
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        6800       asl   0, x
	insn id: M680X_INS_ASL
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ | WRITE
	reading from regs: cc, x
	writing to regs: cc

        6900       clr   0, x
	insn id: M680X_INS_CLR
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: WRITE
	reading from regs: cc, x
	writing to regs: cc

        6a00       staa  0, x
	insn id: M680X_INS_STAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: WRITE
	reading from regs: cc, a, x
	writing to regs: cc

        6b00       stab  0, x
	insn id: M680X_INS_STAB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: WRITE
	reading from regs: cc, b, x
	writing to regs: cc

        6c00       std   0, x
	insn id: M680X_INS_STD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: WRITE
	reading from regs: cc, d, x
	writing to regs: cc

        6d00       sty   0, x
	insn id: M680X_INS_STY
	operand_count: 2
		operands[0].type: REGISTER = y (in mnemonic)
			size: 2
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: WRITE
	reading from regs: cc, y, x
	writing to regs: cc

        6e00       stx   0, x
	insn id: M680X_INS_STX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: WRITE
	reading from regs: cc, x
	writing to regs: cc

        6f00       sts   0, x
	insn id: M680X_INS_STS
	operand_count: 2
		operands[0].type: REGISTER = s (in mnemonic)
			size: 2
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: WRITE
	reading from regs: cc, s, x
	writing to regs: cc

        701000     neg   $1000
	insn id: M680X_INS_NEG
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        711000     com   $1000
	insn id: M680X_INS_COM
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        721000     inc   $1000
	insn id: M680X_INS_INC
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        731000     dec   $1000
	insn id: M680X_INS_DEC
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        741000     lsr   $1000
	insn id: M680X_INS_LSR
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        751000     rol   $1000
	insn id: M680X_INS_ROL
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        761000     ror   $1000
	insn id: M680X_INS_ROR
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        771000     asr   $1000
	insn id: M680X_INS_ASR
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        781000     asl   $1000
	insn id: M680X_INS_ASL
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: READ | WRITE
	reading from regs: cc
	writing to regs: cc

        791000     clr   $1000
	insn id: M680X_INS_CLR
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: WRITE
	reading from regs: cc
	writing to regs: cc

        7a1000     staa  $1000
	insn id: M680X_INS_STAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: WRITE
	reading from regs: cc, a
	writing to regs: cc

        7b1000     stab  $1000
	insn id: M680X_INS_STAB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: WRITE
	reading from regs: cc, b
	writing to regs: cc

        7c1000     std   $1000
	insn id: M680X_INS_STD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: WRITE
	reading from regs: cc, d
	writing to regs: cc

        7d1000     sty   $1000
	insn id: M680X_INS_STY
	operand_count: 2
		operands[0].type: REGISTER = y (in mnemonic)
			size: 2
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: WRITE
	reading from regs: cc, y
	writing to regs: cc

        7e1000     stx   $1000
	insn id: M680X_INS_STX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: WRITE
	reading from regs: cc, x
	writing to regs: cc

        7f1000     sts   $1000
	insn id: M680X_INS_STS
	operand_count: 2
		operands[0].type: REGISTER = s (in mnemonic)
			size: 2
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: WRITE
	reading from regs: cc, s
	writing to regs: cc

        8010       suba  #16
	insn id: M680X_INS_SUBA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        8110       cmpa  #16
	insn id: M680X_INS_CMPA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc

        8210       sbca  #16
	insn id: M680X_INS_SBCA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        831000     subd  #4096
	insn id: M680X_INS_SUBD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #4096
			size: 2
			access: READ
	reading from regs: cc, d
	writing to regs: cc, d

        8410       anda  #16
	insn id: M680X_INS_ANDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        8510       bita  #16
	insn id: M680X_INS_BITA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc

        8610       ldaa  #16
	insn id: M680X_INS_LDAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc
	writing to regs: cc, a

        87         clra
	insn id: M680X_INS_CLRA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
	reading from regs: cc
	writing to regs: cc, a

        8810       eora  #16
	insn id: M680X_INS_EORA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        8910       adca  #16
	insn id: M680X_INS_ADCA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        8a10       oraa  #16
	insn id: M680X_INS_ORAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        8b10       adda  #16
	insn id: M680X_INS_ADDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        8c1000     cpd   #4096
	insn id: M680X_INS_CPD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: READ
		operands[1].type: IMMEDIATE = #4096
			size: 2
			access: READ
	reading from regs: cc, d
	writing to regs: cc

        8d1000     cpy   #4096
	insn id: M680X_INS_CPY
	operand_count: 2
		operands[0].type: REGISTER = y (in mnemonic)
			size: 2
			access: READ
		operands[1].type: IMMEDIATE = #4096
			size: 2
			access: READ
	reading from regs: cc, y
	writing to regs: cc

        8e1000     cpx   #4096
	insn id: M680X_INS_CPX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: READ
		operands[1].type: IMMEDIATE = #4096
			size: 2
			access: READ
	reading from regs: cc, x
	writing to regs: cc

        8f1000     cps   #4096
	insn id: M680X_INS_CPS
	operand_count: 2
		operands[0].type: REGISTER = s (in mnemonic)
			size: 2
			access: READ
		operands[1].type: IMMEDIATE = #4096
			size: 2
			access: READ
	reading from regs: cc, s
	writing to regs: cc

        9010       suba  $10
	insn id: M680X_INS_SUBA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        9110       cmpa  $10
	insn id: M680X_INS_CMPA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc

        9210       sbca  $10
	insn id: M680X_INS_SBCA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        9310       subd  $10
	insn id: M680X_INS_SUBD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 2
			access: READ
	reading from regs: cc, d
	writing to regs: cc, d

        9410       anda  $10
	insn id: M680X_INS_ANDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        9510       bita  $10
	insn id: M680X_INS_BITA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc

        9610       ldaa  $10
	insn id: M680X_INS_LDAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc
	writing to regs: cc, a

        97         tsta
	insn id: M680X_INS_TSTA
	operand_count: 1
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc

        9810       eora  $10
	insn id: M680X_INS_EORA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        9910       adca  $10
	insn id: M680X_INS_ADCA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        9a10       oraa  $10
	insn id: M680X_INS_ORAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        9b10       adda  $10
	insn id: M680X_INS_ADDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        9c10       cpd   $10
	insn id: M680X_INS_CPD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: READ
		operands[1].type: DIRECT = 0x10
			size: 2
			access: READ
	reading from regs: cc, d
	writing to regs: cc

        9d10       cpy   $10
	insn id: M680X_INS_CPY
	operand_count: 2
		operands[0].type: REGISTER = y (in mnemonic)
			size: 2
			access: READ
		operands[1].type: DIRECT = 0x10
			size: 2
			access: READ
	reading from regs: cc, y
	writing to regs: cc

        9e10       cpx   $10
	insn id: M680X_INS_CPX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: READ
		operands[1].type: DIRECT = 0x10
			size: 2
			access: READ
	reading from regs: cc, x
	writing to regs: cc

        9f10       cps   $10
	insn id: M680X_INS_CPS
	operand_count: 2
		operands[0].type: REGISTER = s (in mnemonic)
			size: 2
			access: READ
		operands[1].type: DIRECT = 0x10
			size: 2
			access: READ
	reading from regs: cc, s
	writing to regs: cc

        a000       suba  0, x
	insn id: M680X_INS_SUBA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        a100       cmpa  0, x
	insn id: M680X_INS_CMPA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc

        a200       sbca  0, x
	insn id: M680X_INS_SBCA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        a300       subd  0, x
	insn id: M680X_INS_SUBD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: READ
	reading from regs: cc, d, x
	writing to regs: cc, d

        a400       anda  0, x
	insn id: M680X_INS_ANDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        a500       bita  0, x
	insn id: M680X_INS_BITA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc

        a600       ldaa  0, x
	insn id: M680X_INS_LDAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc, a

        a7         nop
	insn id: M680X_INS_NOP

        a800       eora  0, x
	insn id: M680X_INS_EORA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        a900       adca  0, x
	insn id: M680X_INS_ADCA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        aa00       oraa  0, x
	insn id: M680X_INS_ORAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        ab00       adda  0, x
	insn id: M680X_INS_ADDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        ac00       cpd   0, x
	insn id: M680X_INS_CPD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: READ
	reading from regs: cc, d, x
	writing to regs: cc

        ad00       cpy   0, x
	insn id: M680X_INS_CPY
	operand_count: 2
		operands[0].type: REGISTER = y (in mnemonic)
			size: 2
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: READ
	reading from regs: cc, y, x
	writing to regs: cc

        ae00       cpx   0, x
	insn id: M680X_INS_CPX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: READ
	reading from regs: cc, x
	writing to regs: cc

        af00       cps   0, x
	insn id: M680X_INS_CPS
	operand_count: 2
		operands[0].type: REGISTER = s (in mnemonic)
			size: 2
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: READ
	reading from regs: cc, s, x
	writing to regs: cc

        b01000     suba  $1000
	insn id: M680X_INS_SUBA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        b11000     cmpa  $1000
	insn id: M680X_INS_CMPA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc

        b21000     sbca  $1000
	insn id: M680X_INS_SBCA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        b31000     subd  $1000
	insn id: M680X_INS_SUBD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: READ
	reading from regs: cc, d
	writing to regs: cc, d

        b41000     anda  $1000
	insn id: M680X_INS_ANDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        b51000     bita  $1000
	insn id: M680X_INS_BITA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc

        b61000     ldaa  $1000
	insn id: M680X_INS_LDAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc
	writing to regs: cc, a

        b81000     eora  $1000
	insn id: M680X_INS_EORA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        b91000     adca  $1000
	insn id: M680X_INS_ADCA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        ba1000     oraa  $1000
	insn id: M680X_INS_ORAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        bb1000     adda  $1000
	insn id: M680X_INS_ADDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        bc1000     cpd   $1000
	insn id: M680X_INS_CPD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: READ
	reading from regs: cc, d
	writing to regs: cc

        bd1000     cpy   $1000
	insn id: M680X_INS_CPY
	operand_count: 2
		operands[0].type: REGISTER = y (in mnemonic)
			size: 2
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: READ
	reading from regs: cc, y
	writing to regs: cc

        be1000     cpx   $1000
	insn id: M680X_INS_CPX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: READ
	reading from regs: cc, x
	writing to regs: cc

        bf1000     cps   $1000
	insn id: M680X_INS_CPS
	operand_count: 2
		operands[0].type: REGISTER = s (in mnemonic)
			size: 2
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: READ
	reading from regs: cc, s
	writing to regs: cc

        c010       subb  #16
	insn id: M680X_INS_SUBB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        c110       cmpb  #16
	insn id: M680X_INS_CMPB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc

        c210       sbcb  #16
	insn id: M680X_INS_SBCB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        c31000     addd  #4096
	insn id: M680X_INS_ADDD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #4096
			size: 2
			access: READ
	reading from regs: cc, d
	writing to regs: cc, d

        c410       andb  #16
	insn id: M680X_INS_ANDB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        c510       bitb  #16
	insn id: M680X_INS_BITB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc

        c610       ldab  #16
	insn id: M680X_INS_LDAB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc
	writing to regs: cc, b

        c7         clrb
	insn id: M680X_INS_CLRB
	operand_count: 1
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: WRITE
	reading from regs: cc
	writing to regs: cc, b

        c810       eorb  #16
	insn id: M680X_INS_EORB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        c910       adcb  #16
	insn id: M680X_INS_ADCB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        ca10       orab  #16
	insn id: M680X_INS_ORAB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        cb10       addb  #16
	insn id: M680X_INS_ADDB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: IMMEDIATE = #16
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        cc1000     ldd   #4096
	insn id: M680X_INS_LDD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: IMMEDIATE = #4096
			size: 2
			access: READ
	reading from regs: cc
	writing to regs: cc, d

        cd1000     ldy   #4096
	insn id: M680X_INS_LDY
	operand_count: 2
		operands[0].type: REGISTER = y (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: IMMEDIATE = #4096
			size: 2
			access: READ
	reading from regs: cc
	writing to regs: cc, y

        ce1000     ldx   #4096
	insn id: M680X_INS_LDX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: IMMEDIATE = #4096
			size: 2
			access: READ
	reading from regs: cc
	writing to regs: cc, x

        cf1000     lds   #4096
	insn id: M680X_INS_LDS
	operand_count: 2
		operands[0].type: REGISTER = s (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: IMMEDIATE = #4096
			size: 2
			access: READ
	reading from regs: cc
	writing to regs: cc, s

        d010       subb  $10
	insn id: M680X_INS_SUBB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        d110       cmpb  $10
	insn id: M680X_INS_CMPB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc

        d210       sbcb  $10
	insn id: M680X_INS_SBCB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        d310       addd  $10
	insn id: M680X_INS_ADDD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 2
			access: READ
	reading from regs: cc, d
	writing to regs: cc, d

        d410       andb  $10
	insn id: M680X_INS_ANDB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        d510       bitb  $10
	insn id: M680X_INS_BITB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc

        d610       ldab  $10
	insn id: M680X_INS_LDAB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc
	writing to regs: cc, b

        d7         tstb
	insn id: M680X_INS_TSTB
	operand_count: 1
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc

        d810       eorb  $10
	insn id: M680X_INS_EORB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        d910       adcb  $10
	insn id: M680X_INS_ADCB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        da10       orab  $10
	insn id: M680X_INS_ORAB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        db10       addb  $10
	insn id: M680X_INS_ADDB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: DIRECT = 0x10
			size: 1
			access: READ
	reading from regs: cc, b
	writing to regs: cc, b

        dc10       ldd   $10
	insn id: M680X_INS_LDD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: DIRECT = 0x10
			size: 2
			access: READ
	reading from regs: cc
	writing to regs: cc, d

        dd10       ldy   $10
	insn id: M680X_INS_LDY
	operand_count: 2
		operands[0].type: REGISTER = y (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: DIRECT = 0x10
			size: 2
			access: READ
	reading from regs: cc
	writing to regs: cc, y

        de10       ldx   $10
	insn id: M680X_INS_LDX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: DIRECT = 0x10
			size: 2
			access: READ
	reading from regs: cc
	writing to regs: cc, x

        df10       lds   $10
	insn id: M680X_INS_LDS
	operand_count: 2
		operands[0].type: REGISTER = s (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: DIRECT = 0x10
			size: 2
			access: READ
	reading from regs: cc
	writing to regs: cc, s

        e000       subb  0, x
	insn id: M680X_INS_SUBB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, b, x
	writing to regs: cc, b

        e100       cmpb  0, x
	insn id: M680X_INS_CMPB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, b, x
	writing to regs: cc

        e200       sbcb  0, x
	insn id: M680X_INS_SBCB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, b, x
	writing to regs: cc, b

        e300       addd  0, x
	insn id: M680X_INS_ADDD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: READ
	reading from regs: cc, d, x
	writing to regs: cc, d

        e400       andb  0, x
	insn id: M680X_INS_ANDB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, b, x
	writing to regs: cc, b

        e500       bitb  0, x
	insn id: M680X_INS_BITB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, b, x
	writing to regs: cc

        e600       ldab  0, x
	insn id: M680X_INS_LDAB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc, b

        e700       tst   0, x
	insn id: M680X_INS_TST
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc

        e800       eorb  0, x
	insn id: M680X_INS_EORB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, b, x
	writing to regs: cc, b

        e900       adcb  0, x
	insn id: M680X_INS_ADCB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, b, x
	writing to regs: cc, b

        ea00       orab  0, x
	insn id: M680X_INS_ORAB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, b, x
	writing to regs: cc, b

        eb00       addb  0, x
	insn id: M680X_INS_ADDB
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, b, x
	writing to regs: cc, b

        ec00       ldd   0, x
	insn id: M680X_INS_LDD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: READ
	reading from regs: cc, x
	writing to regs: cc, d

        ed00       ldy   0, x
	insn id: M680X_INS_LDY
	operand_count: 2
		operands[0].type: REGISTER = y (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: READ
	reading from regs: cc, x
	writing to regs: cc, y

        ee00       ldx   0, x
	insn id: M680X_INS_LDX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: READ
	reading from regs: cc, x
	writing to regs: cc, x

        ef00       lds   0, x
	insn id: M680X_INS_LDS
	operand_count: 2
		operands[0].type: REGISTER = s (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: READ
	reading from regs: cc, x
	writing to regs: cc, s

        f01000     suba  $1000
	insn id: M680X_INS_SUBA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        f11000     cmpa  $1000
	insn id: M680X_INS_CMPA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc

        f21000     sbca  $1000
	insn id: M680X_INS_SBCA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        f31000     addd  $1000
	insn id: M680X_INS_ADDD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: READ
	reading from regs: cc, d
	writing to regs: cc, d

        f41000     anda  $1000
	insn id: M680X_INS_ANDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        f51000     bita  $1000
	insn id: M680X_INS_BITA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc

        f61000     ldaa  $1000
	insn id: M680X_INS_LDAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc
	writing to regs: cc, a

        f71000     tst   $1000
	insn id: M680X_INS_TST
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc
	writing to regs: cc

        f81000     eora  $1000
	insn id: M680X_INS_EORA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        f91000     adca  $1000
	insn id: M680X_INS_ADCA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        fa1000     oraa  $1000
	insn id: M680X_INS_ORAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        fb1000     adda  $1000
	insn id: M680X_INS_ADDA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: READ
	reading from regs: cc, a
	writing to regs: cc, a

        fc1000     ldd   $1000
	insn id: M680X_INS_LDD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: READ
	reading from regs: cc
	writing to regs: cc, d

        fd1000     ldy   $1000
	insn id: M680X_INS_LDY
	operand_count: 2
		operands[0].type: REGISTER = y (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: READ
	reading from regs: cc
	writing to regs: cc, y

        fe1000     ldx   $1000
	insn id: M680X_INS_LDX
	operand_count: 2
		operands[0].type: REGISTER = x (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: READ
	reading from regs: cc
	writing to regs: cc, x

        ff1000     lds   $1000
	insn id: M680X_INS_LDS
	operand_count: 2
		operands[0].type: REGISTER = s (in mnemonic)
			size: 2
			access: WRITE
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: READ
	reading from regs: cc
	writing to regs: cc, s

        b720       tfr   cc, a
	insn id: M680X_INS_TFR
	operand_count: 2
		operands[0].type: REGISTER = cc
			size: 1
			access: READ
		operands[1].type: REGISTER = a
			size: 1
			access: WRITE
	reading from regs: cc
	writing to regs: a

        b731       tfr   tmp3, b
	insn id: M680X_INS_TFR
	operand_count: 2
		operands[0].type: REGISTER = tmp3
			size: 2
			access: READ
		operands[1].type: REGISTER = b
			size: 1
			access: WRITE
	reading from regs: tmp3
	writing to regs: b

        b752       tfr   x, cc
	insn id: M680X_INS_TFR
	operand_count: 2
		operands[0].type: REGISTER = x
			size: 2
			access: READ
		operands[1].type: REGISTER = cc
			size: 1
			access: WRITE
	reading from regs: x
	writing to regs: cc

        b723       tfr   cc, tmp2
	insn id: M680X_INS_TFR
	operand_count: 2
		operands[0].type: REGISTER = cc
			size: 1
			access: READ
		operands[1].type: REGISTER = tmp2
			size: 2
			access: WRITE
	reading from regs: cc
	writing to regs: tmp2

        b753       tfr   x, tmp2
	insn id: M680X_INS_TFR
	operand_count: 2
		operands[0].type: REGISTER = x
			size: 2
			access: READ
		operands[1].type: REGISTER = tmp2
			size: 2
			access: WRITE
	reading from regs: x
	writing to regs: tmp2

        b705       tfr   a, x
	insn id: M680X_INS_TFR
	operand_count: 2
		operands[0].type: REGISTER = a
			size: 1
			access: READ
		operands[1].type: REGISTER = x
			size: 2
			access: WRITE
	reading from regs: a
	writing to regs: x

        b775       tfr   s, x
	insn id: M680X_INS_TFR
	operand_count: 2
		operands[0].type: REGISTER = s
			size: 2
			access: READ
		operands[1].type: REGISTER = x
			size: 2
			access: WRITE
	reading from regs: s
	writing to regs: x

        b7a0       exg   cc, a
	insn id: M680X_INS_TFR
	operand_count: 2
		operands[0].type: REGISTER = cc
			size: 1
			access: READ | WRITE
		operands[1].type: REGISTER = a
			size: 1
			access: READ | WRITE
	reading from regs: cc, a
	writing to regs: cc, a

        b7b1       exg   tmp3, b
	insn id: M680X_INS_TFR
	operand_count: 2
		operands[0].type: REGISTER = tmp3
			size: 2
			access: READ | WRITE
		operands[1].type: REGISTER = b
			size: 1
			access: READ | WRITE
	reading from regs: tmp3, b
	writing to regs: tmp3, b

        b7d2       exg   x, cc
	insn id: M680X_INS_TFR
	operand_count: 2
		operands[0].type: REGISTER = x
			size: 2
			access: READ | WRITE
		operands[1].type: REGISTER = cc
			size: 1
			access: READ | WRITE
	reading from regs: x, cc
	writing to regs: x, cc

        b7a3       exg   cc, tmp2
	insn id: M680X_INS_TFR
	operand_count: 2
		operands[0].type: REGISTER = cc
			size: 1
			access: READ | WRITE
		operands[1].type: REGISTER = tmp2
			size: 2
			access: READ | WRITE
	reading from regs: cc, tmp2
	writing to regs: cc, tmp2

        b7d3       exg   x, tmp2
	insn id: M680X_INS_TFR
	operand_count: 2
		operands[0].type: REGISTER = x
			size: 2
			access: READ | WRITE
		operands[1].type: REGISTER = tmp2
			size: 2
			access: READ | WRITE
	reading from regs: x, tmp2
	writing to regs: x, tmp2

        b785       exg   a, x
	insn id: M680X_INS_TFR
	operand_count: 2
		operands[0].type: REGISTER = a
			size: 1
			access: READ | WRITE
		operands[1].type: REGISTER = x
			size: 2
			access: READ | WRITE
	reading from regs: a, x
	writing to regs: a, x

        b7f5       exg   s, x
	insn id: M680X_INS_TFR
	operand_count: 2
		operands[0].type: REGISTER = s
			size: 2
			access: READ | WRITE
		operands[1].type: REGISTER = x
			size: 2
			access: READ | WRITE
	reading from regs: s, x
	writing to regs: s, x

        a60f       ldaa  15, x
	insn id: M680X_INS_LDAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 15
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc, a

        a650       ldaa  -16, y
	insn id: M680X_INS_LDAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: y
			offset: -16
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, y
	writing to regs: cc, a

        a681       ldaa  1, s
	insn id: M680X_INS_LDAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: s
			offset: 1
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, s
	writing to regs: cc, a

0x125d: a6df       ldaa  $125e, pcr
	insn id: M680X_INS_LDAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: pc
			offset: -1
			offset address: 0x125e
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, pc
	writing to regs: cc, a

        a6e0ff     ldaa  255, x
	insn id: M680X_INS_LDAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 255
			offset bits: 9
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc, a

        a6f100     ldaa  -256, s
	insn id: M680X_INS_LDAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: s
			offset: -256
			offset bits: 9
			size: 1
			access: READ
	reading from regs: cc, s
	writing to regs: cc, a

        a6f27fff   ldaa  32767, s
	insn id: M680X_INS_LDAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: s
			offset: 32767
			offset bits: 16
			size: 1
			access: READ
	reading from regs: cc, s
	writing to regs: cc, a

0x1269: a6fa8000   ldaa  $926d, pcr
	insn id: M680X_INS_LDAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: pc
			offset: -32768
			offset address: 0x926d
			offset bits: 16
			size: 1
			access: READ
	reading from regs: cc, pc
	writing to regs: cc, a

        a6e37fff   ldaa  [32767, x]
	insn id: M680X_INS_LDAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED INDIRECT
			base register: x
			offset: 32767
			offset bits: 16
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc, a

        a6eb8000   ldaa  [-32768, y]
	insn id: M680X_INS_LDAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED INDIRECT
			base register: y
			offset: -32768
			offset bits: 16
			size: 1
			access: READ
	reading from regs: cc, y
	writing to regs: cc, a

        a620       ldaa  1, +x
	insn id: M680X_INS_LDAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			pre increment: 1
			size: 1
			access: READ
	reading from regs: cc, x
	writing to regs: cc, a, x

        a667       ldaa  8, +y
	insn id: M680X_INS_LDAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: y
			pre increment: 8
			size: 1
			access: READ
	reading from regs: cc, y
	writing to regs: cc, a, y

        a6af       ldaa  1, -s
	insn id: M680X_INS_LDAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: s
			pre decrement: 1
			size: 1
			access: READ
	reading from regs: cc, s
	writing to regs: cc, a, s

        a6a8       ldaa  8, -s
	insn id: M680X_INS_LDAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: s
			pre decrement: 8
			size: 1
			access: READ
	reading from regs: cc, s
	writing to regs: cc, a, s

        a6e4       ldaa  a, x
	insn id: M680X_INS_LDAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: x
			offset register: a
			size: 1
			access: READ
	reading from regs: cc, x, a
	writing to regs: cc, a

        a6ed       ldaa  b, y
	insn id: M680X_INS_LDAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: y
			offset register: b
			size: 1
			access: READ
	reading from regs: cc, y, b
	writing to regs: cc, a

        a6f6       ldaa  d, s
	insn id: M680X_INS_LDAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: s
			offset register: d
			size: 1
			access: READ
	reading from regs: cc, s, d
	writing to regs: cc, a

0x1283: a6fe       ldaa  d, pc
	insn id: M680X_INS_LDAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED
			base register: pc
			offset register: d
			size: 1
			access: READ
	reading from regs: cc, pc, d
	writing to regs: cc, a

        a6e7       ldaa  [d, x]
	insn id: M680X_INS_LDAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED INDIRECT
			base register: x
			offset register: d
			size: 1
			access: READ
	reading from regs: cc, x, d
	writing to regs: cc, a

        a6ef       ldaa  [d, y]
	insn id: M680X_INS_LDAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED INDIRECT
			base register: y
			offset register: d
			size: 1
			access: READ
	reading from regs: cc, y, d
	writing to regs: cc, a

        a6f7       ldaa  [d, s]
	insn id: M680X_INS_LDAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED INDIRECT
			base register: s
			offset register: d
			size: 1
			access: READ
	reading from regs: cc, s, d
	writing to regs: cc, a

0x128b: a6ff       ldaa  [d, pc]
	insn id: M680X_INS_LDAA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
		operands[1].type: INDEXED INDIRECT
			base register: pc
			offset register: d
			size: 1
			access: READ
	reading from regs: cc, pc, d
	writing to regs: cc, a

        1800003039 movw  #12345; 0, x
	insn id: M680X_INS_MOVW
	operand_count: 2
		operands[0].type: IMMEDIATE = #12345
			size: 2
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: WRITE
	reading from regs: x

        1800e07f3039         movw  #12345; 127, x
	insn id: M680X_INS_MOVW
	operand_count: 2
		operands[0].type: IMMEDIATE = #12345
			size: 2
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 127
			offset bits: 9
			size: 2
			access: WRITE
	reading from regs: x

        1800e27fff3039         movw  #12345; 32767, x
	insn id: M680X_INS_MOVW
	operand_count: 2
		operands[0].type: IMMEDIATE = #12345
			size: 2
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 32767
			offset bits: 16
			size: 2
			access: WRITE
	reading from regs: x

        1801001000 movw  $1000; 0, x
	insn id: M680X_INS_MOVW
	operand_count: 2
		operands[0].type: EXTENDED  = 0x1000
			size: 2
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: WRITE
	reading from regs: x

        1801e07f1000         movw  $1000; 127, x
	insn id: M680X_INS_MOVW
	operand_count: 2
		operands[0].type: EXTENDED  = 0x1000
			size: 2
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 127
			offset bits: 9
			size: 2
			access: WRITE
	reading from regs: x

        1801e27fff1000         movw  $1000; 32767, x
	insn id: M680X_INS_MOVW
	operand_count: 2
		operands[0].type: EXTENDED  = 0x1000
			size: 2
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 32767
			offset bits: 16
			size: 2
			access: WRITE
	reading from regs: x

        18020000   movw  0, x; 0, x
	insn id: M680X_INS_MOVW
	operand_count: 2
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: WRITE
	reading from regs: x

        180200e010 movw  0, x; 16, x
	insn id: M680X_INS_MOVW
	operand_count: 2
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 9
			size: 2
			access: WRITE
	reading from regs: x

        180200e21000         movw  0, x; 4096, x
	insn id: M680X_INS_MOVW
	operand_count: 2
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 4096
			offset bits: 16
			size: 2
			access: WRITE
	reading from regs: x

        1802e07b00 movw  123, x; 0, x
	insn id: M680X_INS_MOVW
	operand_count: 2
		operands[0].type: INDEXED
			base register: x
			offset: 123
			offset bits: 9
			size: 2
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: WRITE
	reading from regs: x

        1802e07be010         movw  123, x; 16, x
	insn id: M680X_INS_MOVW
	operand_count: 2
		operands[0].type: INDEXED
			base register: x
			offset: 123
			offset bits: 9
			size: 2
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 9
			size: 2
			access: WRITE
	reading from regs: x

        1802e07be21000         movw  123, x; 4096, x
	insn id: M680X_INS_MOVW
	operand_count: 2
		operands[0].type: INDEXED
			base register: x
			offset: 123
			offset bits: 9
			size: 2
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 4096
			offset bits: 16
			size: 2
			access: WRITE
	reading from regs: x

        1802e2303900         movw  12345, x; 0, x
	insn id: M680X_INS_MOVW
	operand_count: 2
		operands[0].type: INDEXED
			base register: x
			offset: 12345
			offset bits: 16
			size: 2
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: WRITE
	reading from regs: x

        1802e23039e010         movw  12345, x; 16, x
	insn id: M680X_INS_MOVW
	operand_count: 2
		operands[0].type: INDEXED
			base register: x
			offset: 12345
			offset bits: 16
			size: 2
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 9
			size: 2
			access: WRITE
	reading from regs: x

        1802e23039e21000         movw  12345, x; 4096, x
	insn id: M680X_INS_MOVW
	operand_count: 2
		operands[0].type: INDEXED
			base register: x
			offset: 12345
			offset bits: 16
			size: 2
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 4096
			offset bits: 16
			size: 2
			access: WRITE
	reading from regs: x

        180330391000         movw  #12345, $1000
	insn id: M680X_INS_MOVW
	operand_count: 2
		operands[0].type: IMMEDIATE = #12345
			size: 2
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: WRITE

        180430391000         movw  $3039, $1000
	insn id: M680X_INS_MOVW
	operand_count: 2
		operands[0].type: EXTENDED  = 0x3039
			size: 2
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: WRITE

        1805001000 movw  0, x; $1000
	insn id: M680X_INS_MOVW
	operand_count: 2
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: WRITE
	reading from regs: x

        1805e07b1000         movw  123, x; $1000
	insn id: M680X_INS_MOVW
	operand_count: 2
		operands[0].type: INDEXED
			base register: x
			offset: 123
			offset bits: 9
			size: 2
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: WRITE
	reading from regs: x

        1805e230391000         movw  12345, x; $1000
	insn id: M680X_INS_MOVW
	operand_count: 2
		operands[0].type: INDEXED
			base register: x
			offset: 12345
			offset bits: 16
			size: 2
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 2
			access: WRITE
	reading from regs: x

        1806       aba
	insn id: M680X_INS_ABA
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, b, a
	writing to regs: cc, a

        1807       daa
	insn id: M680X_INS_DAA
	reading from regs: cc, a
	writing to regs: cc, a

        1808007b   movb  #123; 0, x
	insn id: M680X_INS_MOVB
	operand_count: 2
		operands[0].type: IMMEDIATE = #123
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: WRITE
	reading from regs: x

        1808e07f7b movb  #123; 127, x
	insn id: M680X_INS_MOVB
	operand_count: 2
		operands[0].type: IMMEDIATE = #123
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 127
			offset bits: 9
			size: 1
			access: WRITE
	reading from regs: x

        1808e27fff7b         movb  #123; 32767, x
	insn id: M680X_INS_MOVB
	operand_count: 2
		operands[0].type: IMMEDIATE = #123
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 32767
			offset bits: 16
			size: 1
			access: WRITE
	reading from regs: x

        1809001000 movb  $1000; 0, x
	insn id: M680X_INS_MOVB
	operand_count: 2
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: WRITE
	reading from regs: x

        1809e07f1000         movb  $1000; 127, x
	insn id: M680X_INS_MOVB
	operand_count: 2
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 127
			offset bits: 9
			size: 1
			access: WRITE
	reading from regs: x

        1809e27fff1000         movb  $1000; 32767, x
	insn id: M680X_INS_MOVB
	operand_count: 2
		operands[0].type: EXTENDED  = 0x1000
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 32767
			offset bits: 16
			size: 1
			access: WRITE
	reading from regs: x

        180a0000   movb  0, x; 0, x
	insn id: M680X_INS_MOVB
	operand_count: 2
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: WRITE
	reading from regs: x

        180a00e010 movb  0, x; 16, x
	insn id: M680X_INS_MOVB
	operand_count: 2
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 9
			size: 1
			access: WRITE
	reading from regs: x

        180a00e21000         movb  0, x; 4096, x
	insn id: M680X_INS_MOVB
	operand_count: 2
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 4096
			offset bits: 16
			size: 1
			access: WRITE
	reading from regs: x

        180ae07b00 movb  123, x; 0, x
	insn id: M680X_INS_MOVB
	operand_count: 2
		operands[0].type: INDEXED
			base register: x
			offset: 123
			offset bits: 9
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: WRITE
	reading from regs: x

        180ae07be010         movb  123, x; 16, x
	insn id: M680X_INS_MOVB
	operand_count: 2
		operands[0].type: INDEXED
			base register: x
			offset: 123
			offset bits: 9
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 9
			size: 1
			access: WRITE
	reading from regs: x

        180ae07be21000         movb  123, x; 4096, x
	insn id: M680X_INS_MOVB
	operand_count: 2
		operands[0].type: INDEXED
			base register: x
			offset: 123
			offset bits: 9
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 4096
			offset bits: 16
			size: 1
			access: WRITE
	reading from regs: x

        180ae2303900         movb  12345, x; 0, x
	insn id: M680X_INS_MOVB
	operand_count: 2
		operands[0].type: INDEXED
			base register: x
			offset: 12345
			offset bits: 16
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: WRITE
	reading from regs: x

        180ae23039e010         movb  12345, x; 16, x
	insn id: M680X_INS_MOVB
	operand_count: 2
		operands[0].type: INDEXED
			base register: x
			offset: 12345
			offset bits: 16
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 16
			offset bits: 9
			size: 1
			access: WRITE
	reading from regs: x

        180ae23039e21000         movb  12345, x; 4096, x
	insn id: M680X_INS_MOVB
	operand_count: 2
		operands[0].type: INDEXED
			base register: x
			offset: 12345
			offset bits: 16
			size: 1
			access: READ
		operands[1].type: INDEXED
			base register: x
			offset: 4096
			offset bits: 16
			size: 1
			access: WRITE
	reading from regs: x

        180b7b1000 movb  #123, $1000
	insn id: M680X_INS_MOVB
	operand_count: 2
		operands[0].type: IMMEDIATE = #123
			size: 1
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: WRITE

        180c30391000         movb  $3039, $1000
	insn id: M680X_INS_MOVB
	operand_count: 2
		operands[0].type: EXTENDED  = 0x3039
			size: 1
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: WRITE

        180d001000 movb  0, x; $1000
	insn id: M680X_INS_MOVB
	operand_count: 2
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: WRITE
	reading from regs: x

        180de07b1000         movb  123, x; $1000
	insn id: M680X_INS_MOVB
	operand_count: 2
		operands[0].type: INDEXED
			base register: x
			offset: 123
			offset bits: 9
			size: 1
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: WRITE
	reading from regs: x

        180de230391000         movb  12345, x; $1000
	insn id: M680X_INS_MOVB
	operand_count: 2
		operands[0].type: INDEXED
			base register: x
			offset: 12345
			offset bits: 16
			size: 1
			access: READ
		operands[1].type: EXTENDED  = 0x1000
			size: 1
			access: WRITE
	reading from regs: x

        180e       tab
	insn id: M680X_INS_TAB
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
		operands[1].type: REGISTER = b (in mnemonic)
			size: 1
			access: WRITE
	reading from regs: cc, a
	writing to regs: cc, b

        180f       tba
	insn id: M680X_INS_TBA
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: REGISTER = a (in mnemonic)
			size: 1
			access: WRITE
	reading from regs: cc, b
	writing to regs: cc, a

        1810       idiv
	insn id: M680X_INS_IDIV
	reading from regs: cc, d, x
	writing to regs: cc, d, x

        1811       fdiv
	insn id: M680X_INS_FDIV
	reading from regs: cc, d, x
	writing to regs: cc, d, x

        18121000   emacs $1000
	insn id: M680X_INS_EMACS
	operand_count: 1
		operands[0].type: EXTENDED  = 0x1000
			size: 4
			access: READ | WRITE
	reading from regs: cc, x, y
	writing to regs: cc, x

        1813       emuls
	insn id: M680X_INS_EMULS
	reading from regs: cc, d, y
	writing to regs: cc, d, y

        1814       edivs
	insn id: M680X_INS_EDIVS
	reading from regs: cc, d, y, x
	writing to regs: cc, d, y

        1815       idivs
	insn id: M680X_INS_IDIVS
	reading from regs: cc, d, x
	writing to regs: cc, d, x

        1816       sba
	insn id: M680X_INS_SBA
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
	reading from regs: cc, b, a
	writing to regs: cc, a

        1817       cba
	insn id: M680X_INS_CBA
	operand_count: 2
		operands[0].type: REGISTER = b (in mnemonic)
			size: 1
			access: READ
		operands[1].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ
	reading from regs: cc, b, a
	writing to regs: cc

        181800     maxa  0, x
	insn id: M680X_INS_MAXA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        181900     mina  0, x
	insn id: M680X_INS_MINA
	operand_count: 2
		operands[0].type: REGISTER = a (in mnemonic)
			size: 1
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, a, x
	writing to regs: cc, a

        181a00     emaxd 0, x
	insn id: M680X_INS_EMAXD
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: READ
	reading from regs: cc, d, x
	writing to regs: cc, d

        181b00     emind 0, x
	insn id: M680X_INS_EMIND
	operand_count: 2
		operands[0].type: REGISTER = d (in mnemonic)
			size: 2
			access: READ | WRITE
		operands[1].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 2
			access: READ
	reading from regs: cc, d, x
	writing to regs: cc, d

        181c00     maxm  0, x
	insn id: M680X_INS_MAXM
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ | WRITE
	reading from regs: cc, x, a
	writing to regs: cc

        181d00     minm  0, x
	insn id: M680X_INS_MINM
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ | WRITE
	reading from regs: cc, x, a
	writing to regs: cc

        181e00     emaxm 0, x
	insn id: M680X_INS_EMAXM
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ | WRITE
	reading from regs: cc, x, d
	writing to regs: cc

        181f00     eminm 0, x
	insn id: M680X_INS_EMINM
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ | WRITE
	reading from regs: cc, x, d
	writing to regs: cc

0x13ab: 18200000   lbra  $13af
	insn id: M680X_INS_LBRA
	operand_count: 1
		operands[0].type: RELATIVE = 0x13af
	groups: branch_relative, jump

0x13af: 18210000   lbrn  $13b3
	insn id: M680X_INS_LBRN
	operand_count: 1
		operands[0].type: RELATIVE = 0x13b3
	groups: branch_relative, jump

0x13b3: 18220000   lbhi  $13b7
	insn id: M680X_INS_LBHI
	operand_count: 1
		operands[0].type: RELATIVE = 0x13b7
	reading from regs: cc
	groups: branch_relative, jump

0x13b7: 18230000   lbls  $13bb
	insn id: M680X_INS_LBLS
	operand_count: 1
		operands[0].type: RELATIVE = 0x13bb
	reading from regs: cc
	groups: branch_relative, jump

0x13bb: 18240000   lbcc  $13bf
	insn id: M680X_INS_LBCC
	operand_count: 1
		operands[0].type: RELATIVE = 0x13bf
	reading from regs: cc
	groups: branch_relative, jump

0x13bf: 18250000   lbcs  $13c3
	insn id: M680X_INS_LBCS
	operand_count: 1
		operands[0].type: RELATIVE = 0x13c3
	reading from regs: cc
	groups: branch_relative, jump

0x13c3: 18260000   lbne  $13c7
	insn id: M680X_INS_LBNE
	operand_count: 1
		operands[0].type: RELATIVE = 0x13c7
	reading from regs: cc
	groups: branch_relative, jump

0x13c7: 18270000   lbeq  $13cb
	insn id: M680X_INS_LBEQ
	operand_count: 1
		operands[0].type: RELATIVE = 0x13cb
	reading from regs: cc
	groups: branch_relative, jump

0x13cb: 18280000   lbvc  $13cf
	insn id: M680X_INS_LBVC
	operand_count: 1
		operands[0].type: RELATIVE = 0x13cf
	reading from regs: cc
	groups: branch_relative, jump

0x13cf: 18290000   lbvs  $13d3
	insn id: M680X_INS_LBVS
	operand_count: 1
		operands[0].type: RELATIVE = 0x13d3
	reading from regs: cc
	groups: branch_relative, jump

0x13d3: 182a0000   lbpl  $13d7
	insn id: M680X_INS_LBPL
	operand_count: 1
		operands[0].type: RELATIVE = 0x13d7
	reading from regs: cc
	groups: branch_relative, jump

0x13d7: 182b0000   lbmi  $13db
	insn id: M680X_INS_LBMI
	operand_count: 1
		operands[0].type: RELATIVE = 0x13db
	reading from regs: cc
	groups: branch_relative, jump

0x13db: 182c0000   lbge  $13df
	insn id: M680X_INS_LBGE
	operand_count: 1
		operands[0].type: RELATIVE = 0x13df
	reading from regs: cc
	groups: branch_relative, jump

0x13df: 182d0000   lblt  $13e3
	insn id: M680X_INS_LBLT
	operand_count: 1
		operands[0].type: RELATIVE = 0x13e3
	reading from regs: cc
	groups: branch_relative, jump

0x13e3: 182e0000   lbgt  $13e7
	insn id: M680X_INS_LBGT
	operand_count: 1
		operands[0].type: RELATIVE = 0x13e7
	reading from regs: cc
	groups: branch_relative, jump

0x13e7: 182f0000   lble  $13eb
	insn id: M680X_INS_LBLE
	operand_count: 1
		operands[0].type: RELATIVE = 0x13eb
	reading from regs: cc
	groups: branch_relative, jump

        183a       rev
	insn id: M680X_INS_REV
	reading from regs: cc, a, x, y
	writing to regs: cc, a, x

        183b       revw
	insn id: M680X_INS_REVW
	reading from regs: cc, a, x, y
	writing to regs: cc, a, x, y

        183c       wav
	insn id: M680X_INS_WAV
	reading from regs: cc, a, b, x, y
	writing to regs: cc, b, x, y

        183d00     tbl   0, x
	insn id: M680X_INS_TBL
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, x, b
	writing to regs: cc, a

        183e       stop
	insn id: M680X_INS_STOP

        183f00     etbl  0, x
	insn id: M680X_INS_ETBL
	operand_count: 1
		operands[0].type: INDEXED
			base register: x
			offset: 0
			offset bits: 5
			size: 1
			access: READ
	reading from regs: cc, x, b
	writing to regs: cc, a, b

0x13f9

*********************
Platform: M680X_CPU12_ILLEGAL
Code: 0x04 0x02 0x00 0x04 0x03 0x00 0x18 0x30 0x18 0x31 0x18 0x32 0x18 0x33 0x18 0x34 0x18 0x35 0x18 0x36 0x18 0x37 0x18 0x38 0x18 0x39 0x18 0x40 0x18 0x41 0x18 0x42 0x18 0x43 0x18 0x44 0x18 0x45 0x18 0x46 0x18 0x47 0x18 0x48 0x18 0x49 0x18 0x4a 0x00 0x00 0x00 0x18 0x4b 0x00 0x00 0x18 0x4c 0x00 0x00 0x18 0x4d 0x00 0x00 0x18 0x4e 0x00 0x00 0x00 0x18 0x4f 0x00 0x00 0x00 0x18 0x50 0x18 0x51 0x18 0x52 0x18 0x53 0x18 0x54 0x18 0x55 0x18 0x56 0x18 0x57 0x18 0x58 0x18 0x59 0x18 0x5a 0x00 0x18 0x5b 0x00 0x18 0x5c 0x00 0x18 0x5d 0x00 0x18 0x5e 0x00 0x18 0x5f 0x00 0x18 0x60 0x00 0x18 0x61 0x00 0x18 0x62 0x00 0x18 0x63 0x00 0x18 0x64 0x00 0x18 0x65 0x00 0x18 0x66 0x00 0x18 0x67 0x00 0x18 0x68 0x00 0x18 0x69 0x00 0x18 0x6a 0x00 0x18 0x6b 0x00 0x18 0x6c 0x00 0x18 0x6d 0x00 0x18 0x6e 0x00 0x18 0x6f 0x00 0x18 0x70 0x00 0x00 0x18 0x71 0x00 0x00 0x18 0x72 0x00 0x00 0x18 0x73 0x00 0x00 0x18 0x74 0x00 0x00 0x18 0x75 0x00 0x00 0x18 0x77 0x00 0x00 0x18 0x78 0x00 0x00 0x18 0x79 0x00 0x00 0x18 0x7a 0x00 0x00 0x18 0x7b 0x00 0x00 0x18 0x7c 0x00 0x00 0x18 0x7d 0x00 0x00 0x18 0x7e 0x00 0x00 0x18 0x7f 0x00 0x00 0x18 0x80 0x00 0x18 0x81 0x00 0x18 0x82 0x00 0x18 0x83 0x00 0x00 0x18 0x84 0x00 0x18 0x85 0x00 0x18 0x86 0x00 0x18 0x87 0x18 0x88 0x00 0x18 0x89 0x00 0x18 0x8a 0x00 0x18 0x8b 0x00 0x18 0x8c 0x00 0x00 0x18 0x8d 0x00 0x00 0x18 0x8e 0x00 0x00 0x18 0x8f 0x00 0x00 0x18 0x90 0x00 0x18 0x91 0x00 0x18 0x92 0x00 0x18 0x93 0x00 0x18 0x94 0x00 0x18 0x95 0x00 0x18 0x96 0x00 0x18 0x97 0x18 0x98 0x00 0x18 0x99 0x00 0x18 0x9a 0x00 0x18 0x9b 0x00 0x18 0x9c 0x00 0x18 0x9d 0x00 0x18 0x9e 0x00 0x18 0x9f 0x00 0x18 0xa0 0x00 0x18 0xa1 0x00 0x18 0xa2 0x00 0x18 0xa3 0x00 0x18 0xa4 0x00 0x18 0xa5 0x00 0x18 0xa6 0x00 0x18 0xa7 0x18 0xa8 0x00 0x18 0xa9 0x00 0x18 0xaa 0x00 0x18 0xab 0x00 0x18 0xac 0x00 0x18 0xad 0x00 0x18 0xae 0x00 0x18 0xaf 0x00 0x18 0xb0 0x00 0x00 0x18 0xb1 0x00 0x00 0x18 0xb2 0x00 0x00 0x18 0xb3 0x00 0x00 0x18 0xb4 0x00 0x00 0x18 0xb5 0x00 0x00 0x18 0xb6 0x00 0x00 0x18 0xb7 0x00 0x18 0xb8 0x00 0x00 0x18 0xb9 0x00 0x00 0x18 0xba 0x00 0x00 0x18 0xbb 0x00 0x00 0x18 0xbc 0x00 0x00 0x18 0xbd 0x00 0x00 0x18 0xbe 0x00 0x00 0x18 0xbf 0x00 0x00 0x18 0xc0 0x00 0x18 0xc1 0x00 0x18 0xc2 0x00 0x18 0xc3 0x00 0x00 0x18 0xc4 0x00 0x18 0xc5 0x00 0x18 0xc6 0x00 0x18 0xc7 0x18 0xc8 0x00 0x18 0xc9 0x00 0x18 0xca 0x00 0x18 0xcb 0x00 0x18 0xcc 0x00 0x00 0x18 0xcd 0x00 0x00 0x18 0xce 0x00 0x00 0x18 0xcf 0x00 0x00 0x18 0xd0 0x00 0x18 0xd1 0x00 0x18 0xd2 0x00 0x18 0xd3 0x00 0x18 0xd4 0x00 0x18 0xd5 0x00 0x18 0xd6 0x00 0x18 0xd7 0x18 0xd8 0x00 0x18 0xd9 0x00 0x18 0xda 0x00 0x18 0xdb 0x00 0x18 0xdc 0x00 0x18 0xdd 0x00 0x18 0xde 0x00 0x18 0xdf 0x00 0x18 0xe0 0x00 0x18 0xe1 0x00 0x18 0xe2 0x00 0x18 0xe3 0x00 0x18 0xe4 0x00 0x18 0xe5 0x00 0x18 0xe6 0x00 0x18 0xe7 0x00 0x18 0xe8 0x00 0x18 0xe9 0x00 0x18 0xea 0x00 0x18 0xeb 0x00 0x18 0xec 0x00 0x18 0xed 0x00 0x18 0xee 0x00 0x18 0xef 0x00 0x18 0xf0 0x00 0x00 0x18 0xf1 0x00 0x00 0x18 0xf2 0x00 0x00 0x18 0xf3 0x00 0x00 0x18 0xf4 0x00 0x00 0x18 0xf5 0x00 0x00 0x18 0xf6 0x00 0x00 0x18 0xf7 0x00 0x00 0x18 0xf8 0x00 0x00 0x18 0xf9 0x00 0x00 0x18 0xfa 0x00 0x00 0x18 0xfb 0x00 0x00 0x18 0xfc 0x00 0x00 0x18 0xfd 0x00 0x00 0x18 0xfe 0x00 0x00 0x18 0xff 0x00 0x00 
Disasm:
        04         fcb   $04
        02         iny
        00         bgnd
        04         fcb   $04
        03         dey
        00         bgnd
        18         fcb   $18
        30         pulx
        18         fcb   $18
        31         puly
        18         fcb   $18
        32         pula
        18         fcb   $18
        33         pulb
        18         fcb   $18
        34         pshx
        18         fcb   $18
        35         pshy
        18         fcb   $18
        36         psha
        18         fcb   $18
        37         pshb
        18         fcb   $18
        38         pulc
        18         fcb   $18
        39         pshc
        18         fcb   $18
        40         nega
        18         fcb   $18
        41         coma
        18         fcb   $18
        42         inca
        18         fcb   $18
        43         deca
        18         fcb   $18
        44         lsra
        18         fcb   $18
        45         rola
        18         fcb   $18
        46         rora
        18         fcb   $18
        47         asra
        18         fcb   $18
        48         asla
        18         fcb   $18
        49         lsrd
        18         fcb   $18
        4a000000   call  >$0000, 0
        18         fcb   $18
        4b0000     call  0, x; 0
        18         fcb   $18
        4c0000     bset  $00, #0
        18         fcb   $18
        4d0000     bclr  $00, #0
        18         fcb   $18
        4e000000   brset $00, #0, $1044
        18         fcb   $18
        4f000000   brclr $00, #0, $1049
        18         fcb   $18
        50         negb
        18         fcb   $18
        51         comb
        18         fcb   $18
        52         incb
        18         fcb   $18
        53         decb
        18         fcb   $18
        54         lsrb
        18         fcb   $18
        55         rolb
        18         fcb   $18
        56         rorb
        18         fcb   $18
        57         asrb
        18         fcb   $18
        58         aslb
        18         fcb   $18
        59         asld
        18         fcb   $18
        5a00       staa  $00
        18         fcb   $18
        5b00       stab  $00
        18         fcb   $18
        5c00       std   $00
        18         fcb   $18
        5d00       sty   $00
        18         fcb   $18
        5e00       stx   $00
        18         fcb   $18
        5f00       sts   $00
        18         fcb   $18
        6000       neg   0, x
        18         fcb   $18
        6100       com   0, x
        18         fcb   $18
        6200       inc   0, x
        18         fcb   $18
        6300       dec   0, x
        18         fcb   $18
        6400       lsr   0, x
        18         fcb   $18
        6500       rol   0, x
        18         fcb   $18
        6600       ror   0, x
        18         fcb   $18
        6700       asr   0, x
        18         fcb   $18
        6800       asl   0, x
        18         fcb   $18
        6900       clr   0, x
        18         fcb   $18
        6a00       staa  0, x
        18         fcb   $18
        6b00       stab  0, x
        18         fcb   $18
        6c00       std   0, x
        18         fcb   $18
        6d00       sty   0, x
        18         fcb   $18
        6e00       stx   0, x
        18         fcb   $18
        6f00       sts   0, x
        18         fcb   $18
        700000     neg   >$0000
        18         fcb   $18
        710000     com   >$0000
        18         fcb   $18
        720000     inc   >$0000
        18         fcb   $18
        730000     dec   >$0000
        18         fcb   $18
        740000     lsr   >$0000
        18         fcb   $18
        750000     rol   >$0000
        18         fcb   $18
        770000     asr   >$0000
        18         fcb   $18
        780000     asl   >$0000
        18         fcb   $18
        790000     clr   >$0000
        18         fcb   $18
        7a0000     staa  >$0000
        18         fcb   $18
        7b0000     stab  >$0000
        18         fcb   $18
        7c0000     std   >$0000
        18         fcb   $18
        7d0000     sty   >$0000
        18         fcb   $18
        7e0000     stx   >$0000
        18         fcb   $18
        7f0000     sts   >$0000
        18         fcb   $18
        8000       suba  #0
        18         fcb   $18
        8100       cmpa  #0
        18         fcb   $18
        8200       sbca  #0
        18         fcb   $18
        830000     subd  #0
        18         fcb   $18
        8400       anda  #0
        18         fcb   $18
        8500       bita  #0
        18         fcb   $18
        8600       ldaa  #0
        18         fcb   $18
        87         clra
        18         fcb   $18
        8800       eora  #0
        18         fcb   $18
        8900       adca  #0
        18         fcb   $18
        8a00       oraa  #0
        18         fcb   $18
        8b00       adda  #0
        18         fcb   $18
        8c0000     cpd   #0
        18         fcb   $18
        8d0000     cpy   #0
        18         fcb   $18
        8e0000     cpx   #0
        18         fcb   $18
        8f0000     cps   #0
        18         fcb   $18
        9000       suba  $00
        18         fcb   $18
        9100       cmpa  $00
        18         fcb   $18
        9200       sbca  $00
        18         fcb   $18
        9300       subd  $00
        18         fcb   $18
        9400       anda  $00
        18         fcb   $18
        9500       bita  $00
        18         fcb   $18
        9600       ldaa  $00
        18         fcb   $18
        97         tsta
        18         fcb   $18
        9800       eora  $00
        18         fcb   $18
        9900       adca  $00
        18         fcb   $18
        9a00       oraa  $00
        18         fcb   $18
        9b00       adda  $00
        18         fcb   $18
        9c00       cpd   $00
        18         fcb   $18
        9d00       cpy   $00
        18         fcb   $18
        9e00       cpx   $00
        18         fcb   $18
        9f00       cps   $00
        18         fcb   $18
        a000       suba  0, x
        18         fcb   $18
        a100       cmpa  0, x
        18         fcb   $18
        a200       sbca  0, x
        18         fcb   $18
        a300       subd  0, x
        18         fcb   $18
        a400       anda  0, x
        18         fcb   $18
        a500       bita  0, x
        18         fcb   $18
        a600       ldaa  0, x
        18         fcb   $18
        a7         nop
        18         fcb   $18
        a800       eora  0, x
        18         fcb   $18
        a900       adca  0, x
        18         fcb   $18
        aa00       oraa  0, x
        18         fcb   $18
        ab00       adda  0, x
        18         fcb   $18
        ac00       cpd   0, x
        18         fcb   $18
        ad00       cpy   0, x
        18         fcb   $18
        ae00       cpx   0, x
        18         fcb   $18
        af00       cps   0, x
        18         fcb   $18
        b00000     suba  >$0000
        18         fcb   $18
        b10000     cmpa  >$0000
        18         fcb   $18
        b20000     sbca  >$0000
        18         fcb   $18
        b30000     subd  >$0000
        18         fcb   $18
        b40000     anda  >$0000
        18         fcb   $18
        b50000     bita  >$0000
        18         fcb   $18
        b60000     ldaa  >$0000
        18         fcb   $18
        b700       tfr   a, a
        18         fcb   $18
        b80000     eora  >$0000
        18         fcb   $18
        b90000     adca  >$0000
        18         fcb   $18
        ba0000     oraa  >$0000
        18         fcb   $18
        bb0000     adda  >$0000
        18         fcb   $18
        bc0000     cpd   >$0000
        18         fcb   $18
        bd0000     cpy   >$0000
        18         fcb   $18
        be0000     cpx   >$0000
        18         fcb   $18
        bf0000     cps   >$0000
        18         fcb   $18
        c000       subb  #0
        18         fcb   $18
        c100       cmpb  #0
        18         fcb   $18
        c200       sbcb  #0
        18         fcb   $18
        c30000     addd  #0
        18         fcb   $18
        c400       andb  #0
        18         fcb   $18
        c500       bitb  #0
        18         fcb   $18
        c600       ldab  #0
        18         fcb   $18
        c7         clrb
        18         fcb   $18
        c800       eorb  #0
        18         fcb   $18
        c900       adcb  #0
        18         fcb   $18
        ca00       orab  #0
        18         fcb   $18
        cb00       addb  #0
        18         fcb   $18
        cc0000     ldd   #0
        18         fcb   $18
        cd0000     ldy   #0
        18         fcb   $18
        ce0000     ldx   #0
        18         fcb   $18
        cf0000     lds   #0
        18         fcb   $18
        d000       subb  $00
        18         fcb   $18
        d100       cmpb  $00
        18         fcb   $18
        d200       sbcb  $00
        18         fcb   $18
        d300       addd  $00
        18         fcb   $18
        d400       andb  $00
        18         fcb   $18
        d500       bitb  $00
        18         fcb   $18
        d600       ldab  $00
        18         fcb   $18
        d7         tstb
        18         fcb   $18
        d800       eorb  $00
        18         fcb   $18
        d900       adcb  $00
        18         fcb   $18
        da00       orab  $00
        18         fcb   $18
        db00       addb  $00
        18         fcb   $18
        dc00       ldd   $00
        18         fcb   $18
        dd00       ldy   $00
        18         fcb   $18
        de00       ldx   $00
        18         fcb   $18
        df00       lds   $00
        18         fcb   $18
        e000       subb  0, x
        18         fcb   $18
        e100       cmpb  0, x
        18         fcb   $18
        e200       sbcb  0, x
        18         fcb   $18
        e300       addd  0, x
        18         fcb   $18
        e400       andb  0, x
        18         fcb   $18
        e500       bitb  0, x
        18         fcb   $18
        e600       ldab  0, x
        18         fcb   $18
        e700       tst   0, x
        18         fcb   $18
        e800       eorb  0, x
        18         fcb   $18
        e900       adcb  0, x
        18         fcb   $18
        ea00       orab  0, x
        18         fcb   $18
        eb00       addb  0, x
        18         fcb   $18
        ec00       ldd   0, x
        18         fcb   $18
        ed00       ldy   0, x
        18         fcb   $18
        ee00       ldx   0, x
        18         fcb   $18
        ef00       lds   0, x
        18         fcb   $18
        f00000     suba  >$0000
        18         fcb   $18
        f10000     cmpa  >$0000
        18         fcb   $18
        f20000     sbca  >$0000
        18         fcb   $18
        f30000     addd  >$0000
        18         fcb   $18
        f40000     anda  >$0000
        18         fcb   $18
        f50000     bita  >$0000
        18         fcb   $18
        f60000     ldaa  >$0000
        18         fcb   $18
        f70000     tst   >$0000
        18         fcb   $18
        f80000     eora  >$0000
        18         fcb   $18
        f90000     adca  >$0000
        18         fcb   $18
        fa0000     oraa  >$0000
        18         fcb   $18
        fb0000     adda  >$0000
        18         fcb   $18
        fc0000     ldd   >$0000
        18         fcb   $18
        fd0000     ldy   >$0000
        18         fcb   $18
        fe0000     ldx   >$0000
        18         fcb   $18
        ff0000     lds   >$0000
0x127f

